{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { Result } from 'antd';\nimport axios, { Axios } from 'axios';\nimport { all, fork, put, takeLatest } from 'redux-saga/effects';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data); // 로그인 요청 보냄\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: 'LOG_IN_SUCCESS',\n            data: action.data // data : result.data // 로그인 성공시 결과값 안에 들어있는 data\n\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: 'LOG_IN_FAILURE',\n            data: _context.t0.reponse.data // 로그인 실패시 결과값 안에 들어있는 data\n\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: 'LOG_OUT-SUCCESS'\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: 'L0G_OUT_FAILURE',\n            data: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(\"LOG_IN_REQUEST\", logIn);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(\"LOG_OUT_REQUEST\", logOut);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/sagas/user.js"],"names":["logIn","logOut","watchLogIn","watchLogOut","userSaga","Result","axios","Axios","all","fork","put","takeLatest","logInAPI","data","post","logOutAPI","action","delay","type","reponse","response"],"mappings":";;oDAaUA,K;qDAiBAC,M;qDAeAC,U;qDAIAC,W;qDAKeC,Q;;AAtDzB,SAASC,MAAT,QAAuB,MAAvB;AACA,OAAOC,KAAP,IAAgBC,KAAhB,QAA6B,OAA7B;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,UAAxB,QAAyC,oBAAzC;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOP,KAAK,CAACQ,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP,CADoB,CACmB;AAC1C;;AAED,SAASE,SAAT,GAAqB;AACjB,SAAOT,KAAK,CAACQ,IAAN,CAAW,aAAX,CAAP;AACH;;AAGD,SAAUd,KAAV,CAAgBgB,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMC,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMP,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAG,gBADD;AAENL,YAAAA,IAAI,EAAGG,MAAM,CAACH,IAFR,CAGN;;AAHM,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUQ,iBAAMH,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAG,gBADD;AAENL,YAAAA,IAAI,EAAG,YAAIM,OAAJ,CAAYN,IAFb,CAEmB;;AAFnB,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUZ,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMgB,KAAK,CAAC,IAAD,CAAX;;AAFR;AAAA;AAGQ,iBAAMP,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAG;AADD,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOQ,iBAAMR,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAG,iBADD;AAENL,YAAAA,IAAI,EAAG,aAAIO,QAAJ,CAAaP;AAFd,WAAD,CAAT;;AAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUX,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMS,UAAU,CAAC,gBAAD,EAAmBX,KAAnB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMQ,UAAU,CAAC,iBAAD,EAAoBV,MAApB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMI,GAAG,CAAC,CACNC,IAAI,CAACP,UAAD,CADE,EAENO,IAAI,CAACN,WAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { Result } from 'antd';\r\nimport axios, { Axios } from 'axios';\r\nimport {all, fork, put, takeLatest} from 'redux-saga/effects';\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/api/login', data); // 로그인 요청 보냄\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/api/logout')\r\n}\r\n\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        // const result = yield call(logInAPI, action.data) // 로그인 요청에 대한 결과값을 받아서 변수에 저장\r\n        yield delay(1000);\r\n        yield put({\r\n            type : 'LOG_IN_SUCCESS',\r\n            data : action.data,\r\n            // data : result.data // 로그인 성공시 결과값 안에 들어있는 data\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : 'LOG_IN_FAILURE',\r\n            data : err.reponse.data, // 로그인 실패시 결과값 안에 들어있는 data\r\n        });\r\n    }\r\n}\r\n\r\nfunction* logOut() {\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type : 'LOG_OUT-SUCCESS',\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type : 'L0G_OUT_FAILURE',\r\n            data : err.response.data,\r\n        })\r\n    }\r\n\r\n}\r\n\r\nfunction* watchLogIn() {\r\n    yield takeLatest(\"LOG_IN_REQUEST\", logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}