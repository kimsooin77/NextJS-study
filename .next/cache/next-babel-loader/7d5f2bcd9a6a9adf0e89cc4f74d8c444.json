{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Avatar, Card } from 'antd';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { useInView } from 'react-intersection-observer';\nimport { LOAD_POSTS_REQUEST } from '../../reducers/post';\nimport PostCard from '../../components/PostCard';\nimport AppLayout from '../../components/AppLayout';\n\nfunction User() {\n  var dispatch = useDispatch();\n  var router = useRouter();\n  var id = router.query.id;\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector.mainPosts,\n      hasMorePost = _useSelector.hasMorePost,\n      loadPostsLoading = _useSelector.loadPostsLoading;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      userInfo = _useSelector2.userInfo,\n      me = _useSelector2.me;\n\n  var _useInView = useInView(),\n      _useInView2 = _slicedToArray(_useInView, 2),\n      ref = _useInView2[0],\n      inView = _useInView2[1];\n\n  useEffect(function () {\n    if (inView && hasMorePost && !loadPostsLoading) {\n      var _mainPosts;\n\n      var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n      dispatch({\n        type: LOAD_POSTS_REQUEST,\n        lastId: lastId,\n        data: id\n      });\n    }\n  }, [inView, hasMorePost, loadPostsLoading, mainPosts, id]);\n  return __jsx(AppLayout, null, userInfo && __jsx(Head, null, __jsx(\"title\", null, userInfo.nickname, \"\\uB2D8\\uC758 \\uAE00\"), __jsx(\"meta\", {\n    name: \"description\",\n    content: \"\".concat(userInfo.nickname, \"\\uB2D8\\uC758 \\uAC8C\\uC2DC\\uAE00\")\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: \"\".concat(userInfo.nickname, \"\\uB2D8\\uC758 \\uAC8C\\uC2DC\\uAE00\")\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: \"\".concat(userInfo.nickname, \"\\uB2D8\\uC758 \\uAC8C\\uC2DC\\uAE00\")\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: \"https://nodebird.com/user/\".concat(id)\n  })), userInfo && userInfo.id !== (me === null || me === void 0 ? void 0 : me.id) ? __jsx(Card, {\n    style: {\n      marginBottom: 20\n    },\n    actions: [__jsx(\"div\", {\n      key: \"twit\"\n    }, \"\\uC9F9\\uC9F9\", __jsx(\"br\", null), userInfo.Posts), __jsx(\"div\", {\n      key: \"following\"\n    }, \"\\uD314\\uB85C\\uC789\", __jsx(\"br\", null), userInfo.Followings), __jsx(\"div\", {\n      key: \"follower\"\n    }, \"\\uD314\\uB85C\\uC6CC\", __jsx(\"br\", null), userInfo.Followers)]\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, null, userInfo.nickname[0]),\n    title: userInfo.nickname\n  })) : null, mainPosts.map(function (c) {\n    return __jsx(PostCard, {\n      key: c.id,\n      post: c\n    });\n  }), __jsx(\"div\", {\n    ref: hasMorePost && !loadPostsLoading ? ref : undefined,\n    style: {\n      height: 10\n    }\n  }));\n}\n\nexport var __N_SSP = true;\nexport default User;","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/pages/user/[id].js"],"names":["React","useEffect","useDispatch","useSelector","Avatar","Card","Head","useRouter","useInView","LOAD_POSTS_REQUEST","PostCard","AppLayout","User","dispatch","router","id","query","state","post","mainPosts","hasMorePost","loadPostsLoading","user","userInfo","me","ref","inView","lastId","length","type","data","nickname","marginBottom","Posts","Followings","Followers","map","c","undefined","height"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Avatar, Card } from 'antd';\r\nimport { END } from 'redux-saga';\r\nimport Head from 'next/head';\r\nimport { useRouter } from 'next/router';\r\nimport { useInView } from 'react-intersection-observer';\r\n\r\nimport axios from 'axios';\r\nimport { LOAD_POSTS_REQUEST, LOAD_USER_POSTS_REQUEST } from '../../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST, LOAD_USER_REQUEST } from '../../reducers/user';\r\nimport PostCard from '../../components/PostCard';\r\nimport wrapper from '../../store/configureStore';\r\nimport AppLayout from '../../components/AppLayout';\r\n\r\nfunction User() {\r\n  const dispatch = useDispatch();\r\n  const router = useRouter();\r\n  const { id } = router.query;\r\n  const { mainPosts, hasMorePost, loadPostsLoading } = useSelector((state) => state.post);\r\n  const { userInfo, me } = useSelector((state) => state.user);\r\n\r\n  const [ref, inView] = useInView();\r\n\r\n  useEffect(\r\n    () => {\r\n      if (inView && hasMorePost && !loadPostsLoading) {\r\n        const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n        dispatch({\r\n          type: LOAD_POSTS_REQUEST,\r\n          lastId,\r\n          data: id,\r\n        });\r\n      }\r\n    },\r\n    [inView, hasMorePost, loadPostsLoading, mainPosts, id],\r\n  );\r\n\r\n  return (\r\n    <AppLayout>\r\n      {userInfo && (\r\n        <Head>\r\n          <title>\r\n            {userInfo.nickname}\r\n            님의 글\r\n          </title>\r\n          <meta name=\"description\" content={`${userInfo.nickname}님의 게시글`} />\r\n          <meta property=\"og:title\" content={`${userInfo.nickname}님의 게시글`} />\r\n          <meta property=\"og:description\" content={`${userInfo.nickname}님의 게시글`} />\r\n          <meta property=\"og:url\" content={`https://nodebird.com/user/${id}`} />\r\n        </Head>\r\n      )}\r\n      {userInfo && (userInfo.id !== me?.id)\r\n        ? (\r\n          <Card\r\n            style={{ marginBottom: 20 }}\r\n            actions={[\r\n              <div key=\"twit\">\r\n                짹짹\r\n                <br />\r\n                {userInfo.Posts}\r\n              </div>,\r\n              <div key=\"following\">\r\n                팔로잉\r\n                <br />\r\n                {userInfo.Followings}\r\n              </div>,\r\n              <div key=\"follower\">\r\n                팔로워\r\n                <br />\r\n                {userInfo.Followers}\r\n              </div>,\r\n            ]}\r\n          >\r\n            <Card.Meta\r\n              avatar={<Avatar>{userInfo.nickname[0]}</Avatar>}\r\n              title={userInfo.nickname}\r\n            />\r\n          </Card>\r\n        )\r\n        : null}\r\n      {mainPosts.map((c) => (\r\n        <PostCard key={c.id} post={c} />\r\n      ))}\r\n      <div ref={hasMorePost && !loadPostsLoading ? ref : undefined} style={{ height: 10 }} />\r\n    </AppLayout>\r\n  );\r\n}\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  const cookie = context.req ? context.req.headers.cookie : '';\r\n  axios.defaults.headers.Cookie = '';\r\n  if (context.req && cookie) {\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  context.store.dispatch({\r\n    type: LOAD_USER_POSTS_REQUEST,\r\n    data: context.params.id,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_USER_REQUEST,\r\n    data: context.params.id,\r\n  });\r\n  context.store.dispatch(END);\r\n  await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default User;"]},"metadata":{},"sourceType":"module"}