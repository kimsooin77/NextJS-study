{"ast":null,"code":"import produce from \"immer\";\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null\n};\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesDone = false;\n      draft.uploadImagesError = null;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      {\n        draft.imagePaths = action.data; // routes/post에서 res.json으로 받아온 이미지 주소\n\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      }\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n\n    case LIKE_POST_REQUEST:\n      draft.likePostLoading = true;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n      break;\n\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId); // 메인포스트 중에서 전달받은 액션데이터의 포스트아이가 같은 걸 찾아서\n\n        post.Likers.push({\n          id: action.data.UserId\n        }); // 포스트 Likers에 좋아요를 누른 사람(사용자아이디)의 아이디를 넣는다.\n\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n\n    case LIKE_POST_FAILURE:\n      draft.likePostLoading = false;\n      draft.likePostError = action.error;\n      break;\n\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostLoading = true;\n      draft.unlikePostDone = false;\n      draft.unlikePostError = null;\n      break;\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostLoading = false;\n      draft.unlikePostError = action.error;\n      break;\n\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.hasMorePost = draft.mainPosts.length < 50;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.mainPosts.unshift(action.data); // dummyPost를 앞에 추가해야지 게시글이 위로 쌓임;\n\n      draft.addPostDone = true;\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostDone = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.postId);\n      draft.removePostDone = true;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostDone = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break; // 불변성을 지키기 위해 아래와 같이 작성했던 코드를 immer를 사용하면 위의 코드로 정리 가능\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = {...state.mainPosts[postIndex]};\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //     ...state,\n        //     mainPosts,\n        //     addCommentLoading : false,\n        //     addCommentDone : true,\n        // };\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentDone = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer; // 불변성을 위해 immer 사용(알아서 불변성을 유지해줌)","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePost","loadPostsLoading","loadPostsDone","loadPostsError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","error","post","find","v","id","PostId","Likers","push","UserId","filter","concat","length","unshift","postId","Comments"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AAEA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAG,EADY;AAExBC,EAAAA,UAAU,EAAG,EAFW;AAGxBC,EAAAA,WAAW,EAAG,IAHU;AAIxBC,EAAAA,gBAAgB,EAAG,KAJK;AAKxBC,EAAAA,aAAa,EAAG,KALQ;AAMxBC,EAAAA,cAAc,EAAG,IANO;AAOxBC,EAAAA,eAAe,EAAG,KAPM;AAQxBC,EAAAA,YAAY,EAAG,KARS;AASxBC,EAAAA,aAAa,EAAG,IATQ;AAUxBC,EAAAA,iBAAiB,EAAG,KAVI;AAWxBC,EAAAA,cAAc,EAAG,KAXO;AAYxBC,EAAAA,eAAe,EAAG,IAZM;AAaxBC,EAAAA,cAAc,EAAG,KAbO;AAcxBC,EAAAA,WAAW,EAAG,KAdU;AAexBC,EAAAA,YAAY,EAAG,IAfS;AAgBxBC,EAAAA,iBAAiB,EAAG,KAhBI;AAiBxBC,EAAAA,cAAc,EAAG,KAjBO;AAkBxBC,EAAAA,eAAe,EAAG,IAlBM;AAmBxBC,EAAAA,iBAAiB,EAAG,KAnBI;AAoBxBC,EAAAA,cAAc,EAAG,KApBO;AAqBxBC,EAAAA,eAAe,EAAG,IArBM;AAsBxBC,EAAAA,mBAAmB,EAAG,KAtBE;AAuBxBC,EAAAA,gBAAgB,EAAG,KAvBK;AAwBxBC,EAAAA,iBAAiB,EAAG;AAxBI,CAArB;AA2BP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AAEP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AAEP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,OAAO,GAAIC,IAAD,KAAU;AAC7BC,EAAAA,IAAI,EAAGX,gBADsB;AAE7BU,EAAAA;AAF6B,CAAV,CAAhB;AAKP,OAAO,MAAME,UAAU,GAAIF,IAAD,KAAU;AAChCC,EAAAA,IAAI,EAAGR,mBADyB;AAEhCO,EAAAA;AAFgC,CAAV,CAAnB;;AAMP,MAAMG,OAAO,GAAG,CAACC,KAAK,GAAGnD,YAAT,EAAuBoD,MAAvB,KAAkCrD,OAAO,CAACoD,KAAD,EAASE,KAAD,IAAW;AACpE,UAAQD,MAAM,CAACJ,IAAf;AACI,SAAKvB,qBAAL;AACI4B,MAAAA,KAAK,CAAC/B,mBAAN,GAA4B,IAA5B;AACA+B,MAAAA,KAAK,CAAC9B,gBAAN,GAAyB,KAAzB;AACA8B,MAAAA,KAAK,CAAC7B,iBAAN,GAA0B,IAA1B;AACA;;AACJ,SAAKE,qBAAL;AAA6B;AACzB2B,QAAAA,KAAK,CAACnD,UAAN,GAAmBkD,MAAM,CAACL,IAA1B,CADyB,CACO;;AAChCM,QAAAA,KAAK,CAAC/B,mBAAN,GAA4B,KAA5B;AACA+B,QAAAA,KAAK,CAAC9B,gBAAN,GAAyB,IAAzB;AACA;AACH;;AACD,SAAKI,qBAAL;AACI0B,MAAAA,KAAK,CAAC/B,mBAAN,GAA4B,KAA5B;AACA+B,MAAAA,KAAK,CAAC7B,iBAAN,GAA0B4B,MAAM,CAACE,KAAjC;AACA;;AACJ,SAAK1B,iBAAL;AACIyB,MAAAA,KAAK,CAAC9C,eAAN,GAAwB,IAAxB;AACA8C,MAAAA,KAAK,CAAC7C,YAAN,GAAqB,KAArB;AACA6C,MAAAA,KAAK,CAAC5C,aAAN,GAAsB,IAAtB;AACA;;AACJ,SAAKoB,iBAAL;AAAyB;AACrB,cAAM0B,IAAI,GAAGF,KAAK,CAACpD,SAAN,CAAgBuD,IAAhB,CAAsBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASN,MAAM,CAACL,IAAP,CAAYY,MAAjD,CAAb,CADqB,CACkD;;AACvEJ,QAAAA,IAAI,CAACK,MAAL,CAAYC,IAAZ,CAAiB;AAACH,UAAAA,EAAE,EAAGN,MAAM,CAACL,IAAP,CAAYe;AAAlB,SAAjB,EAFqB,CAEwB;;AAC7CT,QAAAA,KAAK,CAAC9C,eAAN,GAAwB,KAAxB;AACA8C,QAAAA,KAAK,CAAC7C,YAAN,GAAqB,IAArB;AACA;AACH;;AACD,SAAKsB,iBAAL;AACIuB,MAAAA,KAAK,CAAC9C,eAAN,GAAwB,KAAxB;AACA8C,MAAAA,KAAK,CAAC5C,aAAN,GAAsB2C,MAAM,CAACE,KAA7B;AACA;;AACJ,SAAKvB,mBAAL;AACIsB,MAAAA,KAAK,CAAC3C,iBAAN,GAA0B,IAA1B;AACA2C,MAAAA,KAAK,CAAC1C,cAAN,GAAuB,KAAvB;AACA0C,MAAAA,KAAK,CAACzC,eAAN,GAAwB,IAAxB;AACA;;AACJ,SAAKoB,mBAAL;AAA2B;AACvB,cAAMuB,IAAI,GAAGF,KAAK,CAACpD,SAAN,CAAgBuD,IAAhB,CAAsBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASN,MAAM,CAACL,IAAP,CAAYY,MAAjD,CAAb;AACAJ,QAAAA,IAAI,CAACK,MAAL,GAAcL,IAAI,CAACK,MAAL,CAAYG,MAAZ,CAAoBN,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASN,MAAM,CAACL,IAAP,CAAYe,MAA/C,CAAd;AACAT,QAAAA,KAAK,CAAC3C,iBAAN,GAA0B,KAA1B;AACA2C,QAAAA,KAAK,CAAC1C,cAAN,GAAuB,IAAvB;AACA;AACH;;AACD,SAAKsB,mBAAL;AACIoB,MAAAA,KAAK,CAAC3C,iBAAN,GAA0B,KAA1B;AACA2C,MAAAA,KAAK,CAACzC,eAAN,GAAwBwC,MAAM,CAACE,KAA/B;AACA;;AACJ,SAAKpB,kBAAL;AACImB,MAAAA,KAAK,CAACjD,gBAAN,GAAyB,IAAzB;AACAiD,MAAAA,KAAK,CAAChD,aAAN,GAAsB,KAAtB;AACAgD,MAAAA,KAAK,CAAC/C,cAAN,GAAuB,IAAvB;AACA;;AACJ,SAAK6B,kBAAL;AACIkB,MAAAA,KAAK,CAACjD,gBAAN,GAAyB,KAAzB;AACAiD,MAAAA,KAAK,CAAChD,aAAN,GAAsB,IAAtB;AACAgD,MAAAA,KAAK,CAACpD,SAAN,GAAkBmD,MAAM,CAACL,IAAP,CAAYiB,MAAZ,CAAmBX,KAAK,CAACpD,SAAzB,CAAlB;AACAoD,MAAAA,KAAK,CAAClD,WAAN,GAAoBkD,KAAK,CAACpD,SAAN,CAAgBgE,MAAhB,GAAyB,EAA7C;AACA;;AACJ,SAAK7B,kBAAL;AACIiB,MAAAA,KAAK,CAACjD,gBAAN,GAAyB,KAAzB;AACAiD,MAAAA,KAAK,CAAC/C,cAAN,GAAuB8C,MAAM,CAACE,KAA9B;AACA;;AACJ,SAAKjB,gBAAL;AACIgB,MAAAA,KAAK,CAACxC,cAAN,GAAuB,IAAvB;AACAwC,MAAAA,KAAK,CAACvC,WAAN,GAAoB,KAApB;AACAuC,MAAAA,KAAK,CAACtC,YAAN,GAAqB,IAArB;AACA;;AACJ,SAAKuB,gBAAL;AACIe,MAAAA,KAAK,CAACxC,cAAN,GAAuB,KAAvB;AACAwC,MAAAA,KAAK,CAACpD,SAAN,CAAgBiE,OAAhB,CAAwBd,MAAM,CAACL,IAA/B,EAFJ,CAE0C;;AACtCM,MAAAA,KAAK,CAACvC,WAAN,GAAoB,IAApB;AACA;;AACJ,SAAKyB,gBAAL;AACIc,MAAAA,KAAK,CAACxC,cAAN,GAAuB,KAAvB;AACAwC,MAAAA,KAAK,CAACvC,WAAN,GAAoB,KAApB;AACAuC,MAAAA,KAAK,CAACtC,YAAN,GAAqBqC,MAAM,CAACE,KAA5B;AACA;;AACJ,SAAKX,mBAAL;AACIU,MAAAA,KAAK,CAAClC,iBAAN,GAA0B,IAA1B;AACAkC,MAAAA,KAAK,CAACjC,cAAN,GAAuB,KAAvB;AACAiC,MAAAA,KAAK,CAAChC,eAAN,GAAwB,IAAxB;AACA;;AACJ,SAAKuB,mBAAL;AACIS,MAAAA,KAAK,CAAClC,iBAAN,GAA0B,KAA1B;AACAkC,MAAAA,KAAK,CAACpD,SAAN,GAAkBoD,KAAK,CAACpD,SAAN,CAAgB8D,MAAhB,CAAwBN,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASN,MAAM,CAACL,IAAP,CAAYoB,MAAnD,CAAlB;AACAd,MAAAA,KAAK,CAACjC,cAAN,GAAuB,IAAvB;AACA;;AACJ,SAAKyB,mBAAL;AACIQ,MAAAA,KAAK,CAAClC,iBAAN,GAA0B,KAA1B;AACAkC,MAAAA,KAAK,CAACjC,cAAN,GAAuB,KAAvB;AACAiC,MAAAA,KAAK,CAAChC,eAAN,GAAwB+B,MAAM,CAACE,KAA/B;AACA;;AACJ,SAAKd,mBAAL;AACIa,MAAAA,KAAK,CAACrC,iBAAN,GAA0B,IAA1B;AACAqC,MAAAA,KAAK,CAACpC,cAAN,GAAuB,KAAvB;AACAoC,MAAAA,KAAK,CAACnC,eAAN,GAAwB,IAAxB;AACA;;AACJ,SAAKuB,mBAAL;AAA2B;AACvB,cAAMc,IAAI,GAAGF,KAAK,CAACpD,SAAN,CAAgBuD,IAAhB,CAAsBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASN,MAAM,CAACL,IAAP,CAAYY,MAAjD,CAAb;AACAJ,QAAAA,IAAI,CAACa,QAAL,CAAcF,OAAd,CAAsBd,MAAM,CAACL,IAA7B;AACAM,QAAAA,KAAK,CAACrC,iBAAN,GAA0B,KAA1B;AACAqC,QAAAA,KAAK,CAACpC,cAAN,GAAuB,IAAvB;AACA,cALuB,CAMvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AACD,SAAKyB,mBAAL;AACIW,MAAAA,KAAK,CAACrC,iBAAN,GAA0B,KAA1B;AACAqC,MAAAA,KAAK,CAACpC,cAAN,GAAuB,KAAvB;AACAoC,MAAAA,KAAK,CAACnC,eAAN,GAAwBkC,MAAM,CAACE,KAA/B;AACA;;AACJ;AACI;AA3HR;AA6HP,CA9HwD,CAAzD;;AAkIA,eAAeJ,OAAf,C,CAEA","sourcesContent":["import produce from \"immer\";\r\n\r\nexport const initialState = {\r\n    mainPosts : [],\r\n    imagePaths : [],\r\n    hasMorePost : true,\r\n    loadPostsLoading : false,\r\n    loadPostsDone : false,\r\n    loadPostsError : null,\r\n    likePostLoading : false,\r\n    likePostDone : false,\r\n    likePostError : null,\r\n    unlikePostLoading : false,\r\n    unlikePostDone : false,\r\n    unlikePostError : null,\r\n    addPostLoading : false,\r\n    addPostDone : false,\r\n    addPostError : null,\r\n    addCommentLoading : false,\r\n    addCommentDone : false,\r\n    addCommentError : null,\r\n    removePostLoading : false,\r\n    removePostDone : false,\r\n    removePostError : null,\r\n    uploadImagesLoading : false,\r\n    uploadImagesDone : false,\r\n    uploadImagesError : null,\r\n}\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\r\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\r\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\r\n\r\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\r\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\r\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\r\n\r\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\r\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\r\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\r\n\r\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\r\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\r\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const addPost = (data) =>({\r\n    type : ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) =>({\r\n    type : ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case UPLOAD_IMAGES_REQUEST : \r\n                draft.uploadImagesLoading = true;\r\n                draft.uploadImagesDone = false;\r\n                draft.uploadImagesError = null;\r\n                break;\r\n            case UPLOAD_IMAGES_SUCCESS : {\r\n                draft.imagePaths = action.data; // routes/post에서 res.json으로 받아온 이미지 주소\r\n                draft.uploadImagesLoading = false;\r\n                draft.uploadImagesDone = true;\r\n                break;\r\n            }\r\n            case UPLOAD_IMAGES_FAILURE : \r\n                draft.uploadImagesLoading = false;\r\n                draft.uploadImagesError = action.error;\r\n                break;\r\n            case LIKE_POST_REQUEST : \r\n                draft.likePostLoading = true;\r\n                draft.likePostDone = false;\r\n                draft.likePostError = null;\r\n                break;\r\n            case LIKE_POST_SUCCESS : {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId); // 메인포스트 중에서 전달받은 액션데이터의 포스트아이가 같은 걸 찾아서\r\n                post.Likers.push({id : action.data.UserId}); // 포스트 Likers에 좋아요를 누른 사람(사용자아이디)의 아이디를 넣는다.\r\n                draft.likePostLoading = false;\r\n                draft.likePostDone = true;\r\n                break;\r\n            }\r\n            case LIKE_POST_FAILURE : \r\n                draft.likePostLoading = false;\r\n                draft.likePostError = action.error;\r\n                break;\r\n            case UNLIKE_POST_REQUEST : \r\n                draft.unlikePostLoading = true;\r\n                draft.unlikePostDone = false;\r\n                draft.unlikePostError = null;\r\n                break;\r\n            case UNLIKE_POST_SUCCESS : {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n                draft.unlikePostLoading = false;\r\n                draft.unlikePostDone = true;\r\n                break;\r\n            }\r\n            case UNLIKE_POST_FAILURE : \r\n                draft.unlikePostLoading = false;\r\n                draft.unlikePostError = action.error;\r\n                break;\r\n            case LOAD_POSTS_REQUEST : \r\n                draft.loadPostsLoading = true;\r\n                draft.loadPostsDone = false;\r\n                draft.loadPostsError = null;\r\n                break;\r\n            case LOAD_POSTS_SUCCESS :\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsDone = true;\r\n                draft.mainPosts = action.data.concat(draft.mainPosts);\r\n                draft.hasMorePost = draft.mainPosts.length < 50;\r\n                break;\r\n            case LOAD_POSTS_FAILURE : \r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsError = action.error;\r\n                break;\r\n            case ADD_POST_REQUEST : \r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS :\r\n                draft.addPostLoading = false;\r\n                draft.mainPosts.unshift(action.data); // dummyPost를 앞에 추가해야지 게시글이 위로 쌓임;\r\n                draft.addPostDone = true;\r\n                break;\r\n            case ADD_POST_FAILURE : \r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n            case REMOVE_POST_REQUEST : \r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS :\r\n                draft.removePostLoading = false;\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.postId);\r\n                draft.removePostDone = true;\r\n                break;\r\n            case REMOVE_POST_FAILURE : \r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n            case ADD_COMMENT_REQUEST : \r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS : {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Comments.unshift(action.data);\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n                // 불변성을 지키기 위해 아래와 같이 작성했던 코드를 immer를 사용하면 위의 코드로 정리 가능\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = {...state.mainPosts[postIndex]};\r\n                // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post;\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts,\r\n                //     addCommentLoading : false,\r\n                //     addCommentDone : true,\r\n                // };\r\n            }\r\n            case ADD_COMMENT_FAILURE : \r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n            default :\r\n                break;\r\n        }\r\n});\r\n    \r\n\r\n\r\nexport default reducer;\r\n\r\n// 불변성을 위해 immer 사용(알아서 불변성을 유지해줌)"]},"metadata":{},"sourceType":"module"}