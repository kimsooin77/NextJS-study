{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kimsooin\\\\Desktop\\\\\\uACF5\\uBD80\\uAE30\\uB85D\\\\\\uACF5\\uBD80\\uAE30\\uB85D\\\\22.04 \\uACF5\\uBD80\\uAE30\\uB85D\\\\next-study\\\\front\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport axios from \"axios\";\nimport React, { useEffect } from \"react\";\nimport { useInView } from \"react-intersection-observer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { END } from \"redux-saga\";\nimport AppLayout from \"../components/AppLayout\";\nimport PostCard from \"../components/PostCard\";\nimport PostForm from \"../components/PostForm\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport { LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\nimport wrapper from \"../store/configureStore\";\n\nconst Home = () => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePost,\n    loadPostsLoading,\n    retweetError\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(() => {\n    function onScroll() {\n      if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePost && !loadPostsLoading) {\n          var _mainPosts;\n\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener(\"scroll\", onScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [hasMorePost, loadPostsLoading, mainPosts]);\n  return __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, me && __jsx(PostForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 20\n    }\n  }), mainPosts.map(post => __jsx(PostCard, {\n    key: post.id,\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 38\n    }\n  })));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : ''; // 쿠키 정보를 변수에 저장\n\n  axios.defaults.headers.Cookie = cookie;\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  });\n  context.store.dispatch(END); // 디스패치가 성공하기까지 시간을 벌어주기 위해 적용\n\n  await context.store.sagaTask.toPromise();\n}); // 서버사이드렌더링을 위한 준비 (Home보다 먼저 실행된다.)\n// 서버사이드렌더링은 처음 렌더링 시 백엔드까지 한번에 갔다가 응답을 받아와 브라우저에서 요청을 두번 하지 않아도돼\n// 초기 로딩 속도가 빨라지는 장점이 있다.\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/pages/index.js"],"names":["axios","React","useEffect","useInView","useDispatch","useSelector","END","AppLayout","PostCard","PostForm","LOAD_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","wrapper","Home","me","state","user","mainPosts","hasMorePost","loadPostsLoading","retweetError","post","dispatch","alert","onScroll","window","pageYOffset","document","documentElement","clientHeight","scrollHeight","lastId","length","id","type","addEventListener","removeEventListener","map","getServerSideProps","context","cookie","req","headers","defaults","Cookie","store","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { END } from \"redux-saga\";\r\n\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport PostCard from \"../components/PostCard\";\r\nimport PostForm from \"../components/PostForm\";\r\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\r\nimport { LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\r\nimport wrapper from \"../store/configureStore\";\r\n\r\nconst Home = () => {\r\n    const { me } = useSelector((state) => state.user); \r\n    const { mainPosts, hasMorePost, loadPostsLoading, retweetError } = useSelector((state) => state.post); \r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if(retweetError) {\r\n            alert(retweetError);\r\n        }\r\n    },[retweetError])\r\n\r\n\r\n    useEffect(() => {\r\n        function onScroll() {\r\n            if(window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n                if(hasMorePost && !loadPostsLoading) {\r\n                    const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n                    dispatch({\r\n                        type : LOAD_POSTS_REQUEST,\r\n                        lastId,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        window.addEventListener(\"scroll\", onScroll);\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", onScroll);\r\n        }\r\n    },[hasMorePost, loadPostsLoading, mainPosts]\r\n    );\r\n    return(\r\n        <AppLayout>\r\n            {me && <PostForm />}\r\n            {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\r\n        </AppLayout>\r\n    )\r\n}\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps( async (context) => {\r\n    const cookie = context.req ? context.req.headers.cookie : ''; // 쿠키 정보를 변수에 저장\r\n    axios.defaults.headers.Cookie = cookie;\r\n    context.store.dispatch({\r\n        type : LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type : LOAD_POSTS_REQUEST,\r\n    });\r\n    context.store.dispatch(END); // 디스패치가 성공하기까지 시간을 벌어주기 위해 적용\r\n    await context.store.sagaTask.toPromise();\r\n\r\n}); // 서버사이드렌더링을 위한 준비 (Home보다 먼저 실행된다.)\r\n// 서버사이드렌더링은 처음 렌더링 시 백엔드까지 한번에 갔다가 응답을 받아와 브라우저에서 요청을 두번 하지 않아도돼\r\n// 초기 로딩 속도가 빨라지는 장점이 있다.\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}