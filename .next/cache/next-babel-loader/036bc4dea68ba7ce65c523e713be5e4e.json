{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, delay, takeLatest, put, throttle, call } from 'redux-saga/effects';\nimport shortid from 'shortid';\nimport { ADD_POST_REQUEST, ADD_COMMENT_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.reponse.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.reponse.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.reponse.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.reponse.data\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`); // get에서 data를 넣으려면 주소뒤에 ?키=값으로 쿼리스트링으로 전달\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.reponse.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(`/post/${data}`); // get에서 data를 넣으려면 주소뒤에 ?키=값으로 쿼리스트링으로 전달\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.reponse.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.reponse.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`); // delete의 데이터는 post.id\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data); // post 리듀서 조작\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    }); // user 리듀서 조작\n\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.reponse.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.reponse.data\n    });\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchUnlikePost), fork(watchLikePost), fork(watchLoadPosts), fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n} // post saga에서 action 리듀서 호출\n// 요청을 보낸 사람이 누군지 알기 위해서는 쿠키를 보내주어야 하기 때문에 front에서는 withCredentials : true,\n// back에서는 cors에서 credentials  true를 해주어야함","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/sagas/post.js"],"names":["axios","all","fork","delay","takeLatest","put","throttle","call","shortid","ADD_POST_REQUEST","ADD_COMMENT_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","retweetAPI","data","post","retweet","action","result","type","err","error","reponse","uploadImagesAPI","uploadImages","unlikePostAPI","delete","unlikePost","likePostAPI","patch","likePost","console","loadPostsAPI","lastId","get","loadPosts","loadPostAPI","loadPost","addPostAPI","addPost","id","generate","removePostAPI","removePost","addCommentAPI","postId","addComment","watchRetweet","watchUploadImages","watchLikePost","watchUnlikePost","watchLoadPosts","watchLoadPost","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,KAAnB,EAA0BC,UAA1B,EAAsCC,GAAtC,EAA2CC,QAA3C,EAAqDC,IAArD,QAAgE,oBAAhE;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SACIC,gBADJ,EACsBC,mBADtB,EAEIC,gBAFJ,EAEsBC,mBAFtB,EAGIC,gBAHJ,EAGsBC,mBAHtB,EAIIC,mBAJJ,EAIyBC,mBAJzB,EAKIC,mBALJ,EAK0BC,kBAL1B,EAMIC,kBANJ,EAMwBC,kBANxB,EAOIC,iBAPJ,EAOuBC,iBAPvB,EAQIC,mBARJ,EAQyBC,mBARzB,EAQ8CC,iBAR9C,EAQiEC,mBARjE,EASIC,qBATJ,EAS2BC,qBAT3B,EASkDC,qBATlD,EAUKC,eAVL,EAUsBC,eAVtB,EAUuCC,eAVvC,EAWKC,iBAXL,EAWwBC,iBAXxB,EAW2CC,iBAX3C,QAYO,kBAZP;AAaA,SAASC,cAAT,EAA0BC,iBAA1B,QAAmD,kBAAnD;;AAGA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOvC,KAAK,CAACwC,IAAN,CAAY,SAAQD,IAAK,UAAzB,CAAP;AACH;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AACtB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMpC,IAAI,CAAC+B,UAAD,EAAaI,MAAM,CAACH,IAApB,CAAzB;AACA,UAAMlC,GAAG,CAAC;AACNuC,MAAAA,IAAI,EAAGb,eADD;AAENQ,MAAAA,IAAI,EAAGI,MAAM,CAACJ;AAFR,KAAD,CAAT;AAIH,GAND,CAME,OAAMM,GAAN,EAAW;AACT,UAAMxC,GAAG,CAAC;AACNuC,MAAAA,IAAI,EAAGZ,eADD;AAENc,MAAAA,KAAK,EAAGD,GAAG,CAACE,OAAJ,CAAYR;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASS,eAAT,CAAyBT,IAAzB,EAA+B;AAC3B,SAAOvC,KAAK,CAACwC,IAAN,CAAW,cAAX,EAA2BD,IAA3B,CAAP;AACH;;AAED,UAAUU,YAAV,CAAuBP,MAAvB,EAA+B;AAC3B,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMpC,IAAI,CAACyC,eAAD,EAAkBN,MAAM,CAACH,IAAzB,CAAzB;AACA,UAAMlC,GAAG,CAAC;AACNuC,MAAAA,IAAI,EAAGhB,qBADD;AAENW,MAAAA,IAAI,EAAGI,MAAM,CAACJ;AAFR,KAAD,CAAT;AAIH,GAND,CAME,OAAMM,GAAN,EAAW;AACT,UAAMxC,GAAG,CAAC;AACNuC,MAAAA,IAAI,EAAGf,qBADD;AAENiB,MAAAA,KAAK,EAAGD,GAAG,CAACE,OAAJ,CAAYR;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASW,aAAT,CAAuBX,IAAvB,EAA6B;AACzB,SAAOvC,KAAK,CAACmD,MAAN,CAAc,SAAQZ,IAAK,OAA3B,CAAP;AACH;;AAED,UAAUa,UAAV,CAAqBV,MAArB,EAA6B;AACzB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMpC,IAAI,CAAC2C,aAAD,EAAgBR,MAAM,CAACH,IAAvB,CAAzB;AACA,UAAMlC,GAAG,CAAC;AACNuC,MAAAA,IAAI,EAAGpB,mBADD;AAENe,MAAAA,IAAI,EAAGI,MAAM,CAACJ;AAFR,KAAD,CAAT;AAIH,GAND,CAME,OAAMM,GAAN,EAAW;AACT,UAAMxC,GAAG,CAAC;AACNuC,MAAAA,IAAI,EAAGlB,mBADD;AAENoB,MAAAA,KAAK,EAAGD,GAAG,CAACE,OAAJ,CAAYR;AAFd,KAAD,CAAT;AAIH;AACJ;;AACD,SAASc,WAAT,CAAqBd,IAArB,EAA2B;AACvB,SAAOvC,KAAK,CAACsD,KAAN,CAAa,SAAQf,IAAK,OAA1B,CAAP;AACH;;AAED,UAAUgB,QAAV,CAAmBb,MAAnB,EAA2B;AACvB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMpC,IAAI,CAAC8C,WAAD,EAAcX,MAAM,CAACH,IAArB,CAAzB;AACA,UAAMlC,GAAG,CAAC;AACNuC,MAAAA,IAAI,EAAGtB,iBADD;AAENiB,MAAAA,IAAI,EAAGI,MAAM,CAACJ;AAFR,KAAD,CAAT;AAIH,GAND,CAME,OAAMM,GAAN,EAAW;AACTW,IAAAA,OAAO,CAACV,KAAR,CAAcD,GAAd;AACA,UAAMxC,GAAG,CAAC;AACNuC,MAAAA,IAAI,EAAGnB,iBADD;AAENqB,MAAAA,KAAK,EAAGD,GAAG,CAACE,OAAJ,CAAYR;AAFd,KAAD,CAAT;AAIH;AACJ;;AACD,SAASkB,YAAT,CAAsBC,MAAtB,EAA8B;AAC1B,SAAO1D,KAAK,CAAC2D,GAAN,CAAW,iBAAgBD,MAAM,IAAI,CAAE,EAAvC,CAAP,CAD0B,CACuB;AACpD;;AAED,UAAUE,SAAV,CAAoBlB,MAApB,EAA4B;AACxB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMpC,IAAI,CAACkD,YAAD,EAAef,MAAM,CAACgB,MAAtB,CAAzB;AACA,UAAMrD,GAAG,CAAC;AACNuC,MAAAA,IAAI,EAAGzB,kBADD;AAENoB,MAAAA,IAAI,EAAGI,MAAM,CAACJ;AAFR,KAAD,CAAT;AAIH,GAND,CAME,OAAMM,GAAN,EAAW;AACT,UAAMxC,GAAG,CAAC;AACNuC,MAAAA,IAAI,EAAGxB,kBADD;AAEN0B,MAAAA,KAAK,EAAGD,GAAG,CAACE,OAAJ,CAAYR;AAFd,KAAD,CAAT;AAIH;AACJ;;AACD,SAASsB,WAAT,CAAqBtB,IAArB,EAA2B;AACvB,SAAOvC,KAAK,CAAC2D,GAAN,CAAW,SAAQpB,IAAK,EAAxB,CAAP,CADuB,CACW;AACrC;;AAED,UAAUuB,QAAV,CAAmBpB,MAAnB,EAA2B;AACvB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMpC,IAAI,CAACsD,WAAD,EAAcnB,MAAM,CAACH,IAArB,CAAzB;AACA,UAAMlC,GAAG,CAAC;AACNuC,MAAAA,IAAI,EAAGV,iBADD;AAENK,MAAAA,IAAI,EAAGI,MAAM,CAACJ;AAFR,KAAD,CAAT;AAIH,GAND,CAME,OAAMM,GAAN,EAAW;AACT,UAAMxC,GAAG,CAAC;AACNuC,MAAAA,IAAI,EAAGT,iBADD;AAENW,MAAAA,KAAK,EAAGD,GAAG,CAACE,OAAJ,CAAYR;AAFd,KAAD,CAAT;AAIH;AACJ;;AACD,SAASwB,UAAT,CAAoBxB,IAApB,EAA0B;AACtB,SAAOvC,KAAK,CAACwC,IAAN,CAAW,OAAX,EAAqBD,IAArB,CAAP;AACH;;AAED,UAAUyB,OAAV,CAAkBtB,MAAlB,EAA0B;AACtB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMpC,IAAI,CAACwD,UAAD,EAAarB,MAAM,CAACH,IAApB,CAAzB;AACA,UAAM0B,EAAE,GAAGzD,OAAO,CAAC0D,QAAR,EAAX;AACA,UAAM7D,GAAG,CAAC;AACNuC,MAAAA,IAAI,EAAGjC,gBADD;AAEN4B,MAAAA,IAAI,EAAGI,MAAM,CAACJ;AAFR,KAAD,CAAT;AAIA,UAAMlC,GAAG,CAAC;AACNuC,MAAAA,IAAI,EAAGR,cADD;AAENG,MAAAA,IAAI,EAAGI,MAAM,CAACJ,IAAP,CAAY0B;AAFb,KAAD,CAAT;AAIH,GAXD,CAWE,OAAMpB,GAAN,EAAW;AACT,UAAMxC,GAAG,CAAC;AACNuC,MAAAA,IAAI,EAAG/B,gBADD;AAENiC,MAAAA,KAAK,EAAGD,GAAG,CAACE,OAAJ,CAAYR;AAFd,KAAD,CAAT;AAIH;AACJ;;AACD,SAAS4B,aAAT,CAAuB5B,IAAvB,EAA6B;AACzB,SAAOvC,KAAK,CAACmD,MAAN,CAAc,SAAQZ,IAAK,EAA3B,CAAP,CADyB,CACY;AACxC;;AAED,UAAU6B,UAAV,CAAqB1B,MAArB,EAA6B;AACzB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMpC,IAAI,CAAC4D,aAAD,EAAgBzB,MAAM,CAACH,IAAvB,CAAzB,CADA,CAEA;;AACA,UAAMlC,GAAG,CAAC;AACNuC,MAAAA,IAAI,EAAG5B,mBADD;AAENuB,MAAAA,IAAI,EAAGI,MAAM,CAACJ;AAFR,KAAD,CAAT,CAHA,CAOA;;AACA,UAAMlC,GAAG,CAAC;AACNuC,MAAAA,IAAI,EAAGP,iBADD;AAENE,MAAAA,IAAI,EAAGG,MAAM,CAACH;AAFR,KAAD,CAAT;AAIH,GAZD,CAYE,OAAMM,GAAN,EAAW;AACT,UAAMxC,GAAG,CAAC;AACNuC,MAAAA,IAAI,EAAG3B,mBADD;AAEN6B,MAAAA,KAAK,EAAGD,GAAG,CAACE,OAAJ,CAAYR;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAAS8B,aAAT,CAAuB9B,IAAvB,EAA6B;AACzB,SAAOvC,KAAK,CAACwC,IAAN,CAAY,SAAQD,IAAI,CAAC+B,MAAO,UAAhC,EAA2C/B,IAA3C,CAAP;AACH;;AAED,UAAUgC,UAAV,CAAqB7B,MAArB,EAA6B;AACzB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMpC,IAAI,CAAC8D,aAAD,EAAgB3B,MAAM,CAACH,IAAvB,CAAzB;AACA,UAAMlC,GAAG,CAAC;AACNuC,MAAAA,IAAI,EAAGhC,mBADD;AAEN2B,MAAAA,IAAI,EAAGI,MAAM,CAACJ;AAFR,KAAD,CAAT;AAIH,GAND,CAME,OAAMM,GAAN,EAAW;AACT,UAAMxC,GAAG,CAAC;AACNuC,MAAAA,IAAI,EAAG9B,mBADD;AAENgC,MAAAA,KAAK,EAAGD,GAAG,CAACE,OAAJ,CAAYR;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUiC,YAAV,GAAyB;AACrB,QAAMpE,UAAU,CAAE0B,eAAF,EAAmBW,OAAnB,CAAhB;AACH;;AAED,UAAUgC,iBAAV,GAA8B;AAC1B,QAAMrE,UAAU,CAAEuB,qBAAF,EAAyBsB,YAAzB,CAAhB;AACH;;AAED,UAAUyB,aAAV,GAA0B;AACtB,QAAMtE,UAAU,CAAEiB,iBAAF,EAAqBkC,QAArB,CAAhB;AACH;;AAED,UAAUoB,eAAV,GAA4B;AACxB,QAAMvE,UAAU,CAACmB,mBAAD,EAAsB6B,UAAtB,CAAhB;AACH;;AAED,UAAUwB,cAAV,GAA2B;AACvB,QAAMtE,QAAQ,CAAC,IAAD,EAAOY,kBAAP,EAA2B0C,SAA3B,CAAd;AACH;;AAED,UAAUiB,aAAV,GAA0B;AACtB,QAAMzE,UAAU,CAAC6B,iBAAD,EAAoB6B,QAApB,CAAhB;AACH;;AAED,UAAUgB,YAAV,GAAyB;AACrB,QAAM1E,UAAU,CAACK,gBAAD,EAAmBuD,OAAnB,CAAhB;AACH;;AAED,UAAUe,eAAV,GAA4B;AACxB,QAAM3E,UAAU,CAACW,mBAAD,EAAsBqD,UAAtB,CAAhB;AACH;;AAED,UAAUY,eAAV,GAA4B;AACxB,QAAM5E,UAAU,CAACM,mBAAD,EAAsB6D,UAAtB,CAAhB;AACH;;AAED,eAAe,UAAUU,QAAV,GAAqB;AAChC,QAAMhF,GAAG,CAAC,CACNC,IAAI,CAACsE,YAAD,CADE,EAENtE,IAAI,CAACuE,iBAAD,CAFE,EAGNvE,IAAI,CAACyE,eAAD,CAHE,EAINzE,IAAI,CAACwE,aAAD,CAJE,EAKNxE,IAAI,CAAC0E,cAAD,CALE,EAMN1E,IAAI,CAAC2E,aAAD,CANE,EAON3E,IAAI,CAAC4E,YAAD,CAPE,EAQN5E,IAAI,CAAC6E,eAAD,CARE,EASN7E,IAAI,CAAC8E,eAAD,CATE,CAAD,CAAT;AAWH,C,CAGD;AAEA;AACA","sourcesContent":["import axios from 'axios';\r\nimport {all, fork, delay, takeLatest, put, throttle, call} from 'redux-saga/effects';\r\nimport shortid from 'shortid';\r\nimport { \r\n    ADD_POST_REQUEST, ADD_COMMENT_REQUEST, \r\n    ADD_POST_SUCCESS, ADD_COMMENT_SUCCESS, \r\n    ADD_POST_FAILURE, ADD_COMMENT_FAILURE, \r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, \r\n    REMOVE_POST_FAILURE , LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE,\r\n    LIKE_POST_REQUEST, LIKE_POST_SUCCESS,\r\n    UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_FAILURE,\r\n    UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE,\r\n     RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE,\r\n     LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME , REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\nfunction retweetAPI(data) {\r\n    return axios.post(`/post/${data}/retweet`); \r\n}\r\n\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type : RETWEET_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : RETWEET_FAILURE,\r\n            error : err.reponse.data \r\n        })\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n    return axios.post('/post/images', data) \r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type : UPLOAD_IMAGES_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : UPLOAD_IMAGES_FAILURE,\r\n            error : err.reponse.data \r\n        })\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`) \r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type : UNLIKE_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : UNLIKE_POST_FAILURE,\r\n            error : err.reponse.data \r\n        })\r\n    }\r\n}\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`); \r\n}\r\n\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type : LIKE_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch(err) {\r\n        console.error(err);\r\n        yield put({\r\n            type : LIKE_POST_FAILURE,\r\n            error : err.reponse.data \r\n        })\r\n    }\r\n}\r\nfunction loadPostsAPI(lastId) {\r\n    return axios.get(`/posts?lastId=${lastId || 0}`) // get에서 data를 넣으려면 주소뒤에 ?키=값으로 쿼리스트링으로 전달\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n        yield put({\r\n            type : LOAD_POSTS_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : LOAD_POSTS_FAILURE,\r\n            error : err.reponse.data \r\n        })\r\n    }\r\n}\r\nfunction loadPostAPI(data) {\r\n    return axios.get(`/post/${data}`) // get에서 data를 넣으려면 주소뒤에 ?키=값으로 쿼리스트링으로 전달\r\n}\r\n\r\nfunction* loadPost(action) {\r\n    try {\r\n        const result = yield call(loadPostAPI, action.data);\r\n        yield put({\r\n            type : LOAD_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : LOAD_POST_FAILURE,\r\n            error : err.reponse.data \r\n        })\r\n    }\r\n}\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post',  data) \r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data); \r\n        const id = shortid.generate();\r\n        yield put({\r\n            type : ADD_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n        yield put({\r\n            type : ADD_POST_TO_ME,\r\n            data : result.data.id,\r\n        })\r\n    } catch(err) {\r\n        yield put({\r\n            type : ADD_POST_FAILURE,\r\n            error : err.reponse.data \r\n        })\r\n    }\r\n}\r\nfunction removePostAPI(data) {\r\n    return axios.delete(`/post/${data}`) // delete의 데이터는 post.id\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        const result = yield call(removePostAPI, action.data);\r\n        // post 리듀서 조작\r\n        yield put({\r\n            type : REMOVE_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n        // user 리듀서 조작\r\n        yield put({\r\n            type : REMOVE_POST_OF_ME,\r\n            data : action.data,\r\n        })\r\n    } catch(err) {\r\n        yield put({\r\n            type : REMOVE_POST_FAILURE,\r\n            error : err.reponse.data \r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data); \r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type : ADD_COMMENT_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : ADD_COMMENT_FAILURE,\r\n            error : err.reponse.data \r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchRetweet() {\r\n    yield takeLatest( RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest( UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest( LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n    yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchRetweet),\r\n        fork(watchUploadImages),\r\n        fork(watchUnlikePost),\r\n        fork(watchLikePost),\r\n        fork(watchLoadPosts),\r\n        fork(watchLoadPost),\r\n        fork(watchAddPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}\r\n\r\n\r\n// post saga에서 action 리듀서 호출\r\n\r\n// 요청을 보낸 사람이 누군지 알기 위해서는 쿠키를 보내주어야 하기 때문에 front에서는 withCredentials : true,\r\n// back에서는 cors에서 credentials  true를 해주어야함"]},"metadata":{},"sourceType":"module"}