{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, put, takeLatest, delay, call } from 'redux-saga/effects';\nimport { LOG_IN_SUCCESS, LOG_OUT_SUCCESS, SIGN_UP_SUCCESS, LOG_IN_REQUEST, LOG_OUT_REQUEST, SIGN_UP_REQUEST, LOG_IN_FAILURE, LOG_OUT_FAILURE, SIGN_UP_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_MY_INFO_FAILURE } from '../reducers/user';\n\nfunction loadMyInfoAPI(data) {\n  return axios.post('/login', data);\n}\n\nfunction* loadMyInfo(action) {\n  try {\n    const result = yield call(loadMyInfoAPI, action.data);\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_MY_INFO_FAILURE,\n      error: err.reponse.data\n    });\n  }\n}\n\nfunction followAPI(data) {\n  return axios.post('/api/follow', data); // 로그인 요청 보냄\n}\n\nfunction unfollowAPI(data) {\n  return axios.post('/api/unfollow', data); // 로그인 요청 보냄\n}\n\nfunction* follow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.reponse.data\n    });\n  }\n}\n\nfunction* unfollow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.reponse.data\n    });\n  }\n}\n\nfunction logInAPI(data) {\n  return axios.post('/user/login', data); // 로그인 요청 보냄\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data); // 로그인 요청에 대한 결과값을 받아서 변수에 저장\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data // 로그인 성공시 결과값 안에 들어있는 data\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data // 로그인 실패시 결과값 안에 들어있는 data\n\n    });\n  }\n}\n\nfunction logOutAPI(data) {\n  return axios.post('/user/logout', data);\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post('/user', data); // daata는 email,password,nickname이 들어있는 객체이다.\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadMyInfo() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLoadMyInfo), fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/sagas/user.js"],"names":["axios","all","fork","put","takeLatest","delay","call","LOG_IN_SUCCESS","LOG_OUT_SUCCESS","SIGN_UP_SUCCESS","LOG_IN_REQUEST","LOG_OUT_REQUEST","SIGN_UP_REQUEST","LOG_IN_FAILURE","LOG_OUT_FAILURE","SIGN_UP_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_SUCCESS","LOAD_MY_INFO_FAILURE","loadMyInfoAPI","data","post","loadMyInfo","action","result","type","err","error","reponse","followAPI","unfollowAPI","follow","unfollow","logInAPI","logIn","console","response","logOutAPI","logOut","signUpAPI","signUp","log","watchLoadMyInfo","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {all, fork, put, takeLatest, delay, call} from 'redux-saga/effects';\r\nimport { \r\n    LOG_IN_SUCCESS, LOG_OUT_SUCCESS, SIGN_UP_SUCCESS,\r\n    LOG_IN_REQUEST, LOG_OUT_REQUEST, SIGN_UP_REQUEST,\r\n    LOG_IN_FAILURE, LOG_OUT_FAILURE, SIGN_UP_FAILURE,\r\n    FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE,\r\n    UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE,\r\n    LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_MY_INFO_FAILURE\r\n} from '../reducers/user';\r\n\r\n\r\nfunction loadMyInfoAPI(data) {\r\n    return axios.post('/login', data);\r\n}\r\n\r\nfunction* loadMyInfo(action) {\r\n    try {\r\n        const result = yield call(loadMyInfoAPI, action.data)\r\n        yield put({\r\n            type : LOAD_MY_INFO_SUCCESS,\r\n            data : action.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : LOAD_MY_INFO_FAILURE,\r\n            error : err.reponse.data, \r\n        });\r\n    }\r\n}\r\n\r\nfunction followAPI(data) {\r\n    return axios.post('/api/follow', data); // 로그인 요청 보냄\r\n}\r\n\r\nfunction unfollowAPI(data) {\r\n    return axios.post('/api/unfollow', data); // 로그인 요청 보냄\r\n}\r\n\r\n\r\nfunction* follow(action) {\r\n    try {\r\n        yield delay(1000);\r\n        yield put({\r\n            type : FOLLOW_SUCCESS,\r\n            data : action.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : FOLLOW_FAILURE,\r\n            error : err.reponse.data, \r\n        });\r\n    }\r\n}\r\n\r\nfunction* unfollow(action) {\r\n    try {\r\n        yield delay(1000);\r\n        yield put({\r\n            type : UNFOLLOW_SUCCESS,\r\n            data : action.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : UNFOLLOW_FAILURE,\r\n            error : err.reponse.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/user/login', data); // 로그인 요청 보냄\r\n}\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        const result = yield call(logInAPI, action.data); // 로그인 요청에 대한 결과값을 받아서 변수에 저장\r\n        \r\n        yield put({\r\n            type : LOG_IN_SUCCESS,\r\n            data : result.data, // 로그인 성공시 결과값 안에 들어있는 data\r\n        });\r\n    } catch(err) {\r\n        console.error(err);\r\n        yield put({\r\n            type : LOG_IN_FAILURE,\r\n            error : err.response.data, // 로그인 실패시 결과값 안에 들어있는 data\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction logOutAPI(data) {\r\n    return axios.post('/user/logout', data)\r\n}\r\n\r\n\r\nfunction* logOut() {\r\n    try{\r\n        yield call(logOutAPI);\r\n        yield put({\r\n            type : LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type : LOG_OUT_FAILURE,\r\n            error : err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n    return axios.post('/user', data) // daata는 email,password,nickname이 들어있는 객체이다.\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try{\r\n        const result = yield call(signUpAPI, action.data);\r\n        console.log(result);\r\n        yield put({\r\n            type : SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type : SIGN_UP_FAILURE,\r\n            error : err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadMyInfo() {\r\n    yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\r\n}\r\n\r\nfunction* watchFollow() {\r\n    yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\n\r\nfunction* watchUnfollow() {\r\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n\r\nfunction* watchLogIn() {\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLoadMyInfo),\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}