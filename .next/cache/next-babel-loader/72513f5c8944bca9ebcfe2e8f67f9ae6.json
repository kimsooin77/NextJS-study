{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(retweet),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(watchRetweet),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from 'axios';\nimport { all, fork, delay, takeLatest, put, throttle, call } from 'redux-saga/effects';\nimport shortid from 'shortid';\nimport { ADD_POST_REQUEST, ADD_COMMENT_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction retweetAPI(data) {\n  return axios.post(\"/post/\".concat(data, \"/retweet\"));\n}\n\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retweet$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context.t0.reponse.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context2.t0.reponse.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction unlikePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data, \"/like\"));\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context3.t0.reponse.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(\"/post/\".concat(data, \"/like\"));\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context4.next = 13;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context4.t0.reponse.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(\"/posts?lastId=\".concat(lastId || 0)); // get에서 data를 넣으려면 주소뒤에 ?키=값으로 쿼리스트링으로 전달\n}\n\nfunction loadPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadPostsAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            error: _context5.t0.reponse.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction addPost(action) {\n  var result, id;\n  return _regeneratorRuntime.wrap(function addPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context6.sent;\n          id = shortid.generate();\n          _context6.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context6.next = 9;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 9:\n          _context6.next = 15;\n          break;\n\n        case 11:\n          _context6.prev = 11;\n          _context6.t0 = _context6[\"catch\"](0);\n          _context6.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context6.t0.reponse.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 11]]);\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data)); // delete의 데이터는 post.id\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(removePostAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 8:\n          _context7.next = 14;\n          break;\n\n        case 10:\n          _context7.prev = 10;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context7.t0.reponse.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 10]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context8.sent;\n          _context8.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context8.next = 12;\n          break;\n\n        case 8:\n          _context8.prev = 8;\n          _context8.t0 = _context8[\"catch\"](0);\n          _context8.next = 12;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context8.t0.reponse.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 8]]);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return all([fork(watchRetweet), fork(watchUploadImages), fork(watchUnlikePost), fork(watchLikePost), fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17);\n} // post saga에서 action 리듀서 호출\n// 요청을 보낸 사람이 누군지 알기 위해서는 쿠키를 보내주어야 하기 때문에 front에서는 withCredentials : true,\n// back에서는 cors에서 credentials  true를 해주어야함","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/sagas/post.js"],"names":["retweet","uploadImages","unlikePost","likePost","loadPosts","addPost","removePost","addComment","watchRetweet","watchUploadImages","watchLikePost","watchUnlikePost","watchLoadPost","watchAddPost","watchRemovePost","watchAddComment","postSaga","axios","all","fork","delay","takeLatest","put","throttle","call","shortid","ADD_POST_REQUEST","ADD_COMMENT_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","retweetAPI","data","post","action","result","type","error","reponse","uploadImagesAPI","unlikePostAPI","likePostAPI","patch","console","loadPostsAPI","lastId","get","addPostAPI","id","generate","removePostAPI","addCommentAPI","postId"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {all, fork, delay, takeLatest, put, throttle, call} from 'redux-saga/effects';\r\nimport shortid from 'shortid';\r\nimport { \r\n    ADD_POST_REQUEST, ADD_COMMENT_REQUEST, \r\n    ADD_POST_SUCCESS, ADD_COMMENT_SUCCESS, \r\n    ADD_POST_FAILURE, ADD_COMMENT_FAILURE, \r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, \r\n    REMOVE_POST_FAILURE , LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE,\r\n    LIKE_POST_REQUEST, LIKE_POST_SUCCESS,\r\n    UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_FAILURE,\r\n    UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE,\r\n     RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME , REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\nfunction retweetAPI(data) {\r\n    return axios.post(`/post/${data}/retweet`); \r\n}\r\n\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type : RETWEET_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : RETWEET_FAILURE,\r\n            error : err.reponse.data \r\n        })\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n    return axios.post('/post/images', data) \r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type : UPLOAD_IMAGES_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : UPLOAD_IMAGES_FAILURE,\r\n            error : err.reponse.data \r\n        })\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`) \r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type : UNLIKE_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : UNLIKE_POST_FAILURE,\r\n            error : err.reponse.data \r\n        })\r\n    }\r\n}\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`); \r\n}\r\n\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type : LIKE_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch(err) {\r\n        console.error(err);\r\n        yield put({\r\n            type : LIKE_POST_FAILURE,\r\n            error : err.reponse.data \r\n        })\r\n    }\r\n}\r\nfunction loadPostsAPI(lastId) {\r\n    return axios.get(`/posts?lastId=${lastId || 0}`) // get에서 data를 넣으려면 주소뒤에 ?키=값으로 쿼리스트링으로 전달\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.data);\r\n        yield put({\r\n            type : LOAD_POSTS_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : LOAD_POSTS_FAILURE,\r\n            error : err.reponse.data \r\n        })\r\n    }\r\n}\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post',  data) \r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data); \r\n        const id = shortid.generate();\r\n        yield put({\r\n            type : ADD_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n        yield put({\r\n            type : ADD_POST_TO_ME,\r\n            data : result.data.id,\r\n        })\r\n    } catch(err) {\r\n        yield put({\r\n            type : ADD_POST_FAILURE,\r\n            error : err.reponse.data \r\n        })\r\n    }\r\n}\r\nfunction removePostAPI(data) {\r\n    return axios.delete(`/post/${data}`) // delete의 데이터는 post.id\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        const result = yield call(removePostAPI, action.data);\r\n        // post 리듀서 조작\r\n        yield put({\r\n            type : REMOVE_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n        // user 리듀서 조작\r\n        yield put({\r\n            type : REMOVE_POST_OF_ME,\r\n            data : action.data,\r\n        })\r\n    } catch(err) {\r\n        yield put({\r\n            type : REMOVE_POST_FAILURE,\r\n            error : err.reponse.data \r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data); \r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type : ADD_COMMENT_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : ADD_COMMENT_FAILURE,\r\n            error : err.reponse.data \r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchRetweet() {\r\n    yield takeLatest( RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest( UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest( LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchRetweet),\r\n        fork(watchUploadImages),\r\n        fork(watchUnlikePost),\r\n        fork(watchLikePost),\r\n        fork(watchLoadPost),\r\n        fork(watchAddPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}\r\n\r\n\r\n// post saga에서 action 리듀서 호출\r\n\r\n// 요청을 보낸 사람이 누군지 알기 위해서는 쿠키를 보내주어야 하기 때문에 front에서는 withCredentials : true,\r\n// back에서는 cors에서 credentials  true를 해주어야함"]},"metadata":{},"sourceType":"module"}