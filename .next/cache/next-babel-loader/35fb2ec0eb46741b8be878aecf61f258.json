{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport { LOG_IN_SUCCESS, LOG_OUT_SUCCESS, SIGN_UP_SUCCESS, LOG_IN_REQUEST, LOG_OUT_REQUEST, SIGN_UP_REQUEST, LOG_IN_FAILURE, LOG_OUT_FAILURE, SIGN_UP_FAILURE } from '../reducers/user';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data); // 로그인 요청 보냄\n}\n\nfunction logOutAPI(data) {\n  return axios.post('/api/logout', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data) // 로그인 요청에 대한 결과값을 받아서 변수에 저장\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data // data : result.data // 로그인 성공시 결과값 안에 들어있는 data\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.reponse.data // 로그인 실패시 결과값 안에 들어있는 data\n\n    });\n  }\n}\n\nfunction* logOut() {\n  try {\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/sagas/user.js"],"names":["axios","all","fork","put","takeLatest","delay","LOG_IN_SUCCESS","LOG_OUT_SUCCESS","SIGN_UP_SUCCESS","LOG_IN_REQUEST","LOG_OUT_REQUEST","SIGN_UP_REQUEST","LOG_IN_FAILURE","LOG_OUT_FAILURE","SIGN_UP_FAILURE","logInAPI","data","post","logOutAPI","logIn","action","type","err","error","reponse","logOut","response","watchLogIn","watchLogOut","userSaga","watchSignUp"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,UAAxB,EAAoCC,KAApC,QAAgD,oBAAhD;AACA,SACIC,cADJ,EACoBC,eADpB,EACqCC,eADrC,EAEIC,cAFJ,EAEoBC,eAFpB,EAEqCC,eAFrC,EAGIC,cAHJ,EAGoBC,eAHpB,EAGqCC,eAHrC,QAIO,kBAJP;;AAMA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOhB,KAAK,CAACiB,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP,CADoB,CACmB;AAC1C;;AAED,SAASE,SAAT,CAAmBF,IAAnB,EAAyB;AACrB,SAAOhB,KAAK,CAACiB,IAAN,CAAW,aAAX,EAA0BD,IAA1B,CAAP;AACH;;AAGD,UAAUG,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACA;AACA,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAAGf,cADD;AAENU,MAAAA,IAAI,EAAGI,MAAM,CAACJ,IAFR,CAGN;;AAHM,KAAD,CAAT;AAKH,GARD,CAQE,OAAMM,GAAN,EAAW;AACT,UAAMnB,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAAGT,cADD;AAENW,MAAAA,KAAK,EAAGD,GAAG,CAACE,OAAJ,CAAYR,IAFd,CAEoB;;AAFpB,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUS,MAAV,GAAmB;AACf,MAAG;AACC,UAAMpB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAAGd;AADD,KAAD,CAAT;AAGH,GALD,CAKE,OAAOe,GAAP,EAAY;AACV,UAAMnB,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAAGR,eADD;AAENU,MAAAA,KAAK,EAAGD,GAAG,CAACI,QAAJ,CAAaV;AAFf,KAAD,CAAT;AAIH;AAEJ;;AAED,UAAUW,UAAV,GAAuB;AACnB,QAAMvB,UAAU,CAACK,cAAD,EAAiBU,KAAjB,CAAhB;AACH;;AAED,UAAUS,WAAV,GAAwB;AACpB,QAAMxB,UAAU,CAACM,eAAD,EAAkBe,MAAlB,CAAhB;AACH;;AAGD,eAAe,UAAUI,QAAV,GAAqB;AAChC,QAAM5B,GAAG,CAAC,CACNC,IAAI,CAACyB,UAAD,CADE,EAENzB,IAAI,CAAC0B,WAAD,CAFE,EAGN1B,IAAI,CAAC4B,WAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import axios from 'axios';\r\nimport {all, fork, put, takeLatest, delay} from 'redux-saga/effects';\r\nimport { \r\n    LOG_IN_SUCCESS, LOG_OUT_SUCCESS, SIGN_UP_SUCCESS,\r\n    LOG_IN_REQUEST, LOG_OUT_REQUEST, SIGN_UP_REQUEST,\r\n    LOG_IN_FAILURE, LOG_OUT_FAILURE, SIGN_UP_FAILURE\r\n} from '../reducers/user';\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/api/login', data); // 로그인 요청 보냄\r\n}\r\n\r\nfunction logOutAPI(data) {\r\n    return axios.post('/api/logout', data)\r\n}\r\n\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        // const result = yield call(logInAPI, action.data) // 로그인 요청에 대한 결과값을 받아서 변수에 저장\r\n        yield delay(1000);\r\n        yield put({\r\n            type : LOG_IN_SUCCESS,\r\n            data : action.data,\r\n            // data : result.data // 로그인 성공시 결과값 안에 들어있는 data\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : LOG_IN_FAILURE,\r\n            error : err.reponse.data, // 로그인 실패시 결과값 안에 들어있는 data\r\n        });\r\n    }\r\n}\r\n\r\nfunction* logOut() {\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type : LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type : LOG_OUT_FAILURE,\r\n            error : err.response.data,\r\n        })\r\n    }\r\n\r\n}\r\n\r\nfunction* watchLogIn() {\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}