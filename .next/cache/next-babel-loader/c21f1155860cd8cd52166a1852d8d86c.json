{"ast":null,"code":"import produce from \"immer\";\nexport const initialState = {\n  mainPosts: [],\n  singlePost: null,\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\nexport const LOAD_USER_POSTS_REQUEST = \"LOAD_USER_POSTS_REQUEST\";\nexport const LOAD_USER_POSTS_SUCCESS = \"LOAD_USER_POSTS_SUCCESS\";\nexport const LOAD_USER_POSTS_FAILURE = \"LOAD_USER_POSTS_FAILURE\";\nexport const LOAD_HASHTAG_POSTS_REQUEST = \"LOAD_HASHTAGE_POSTS_REQUEST\";\nexport const LOAD_HASHTAG_POSTS_SUCCESS = \"LOAD_HASHTAGE_POSTS_SUCCESS\";\nexport const LOAD_HASHTAG_POSTS_FAILURE = \"LOAD_HASHTAGE_POSTS_FAILURE\";\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport const RETWEET_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case REMOVE_IMAGE:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      break;\n\n    case RETWEET_REQUEST:\n      draft.retweetLoading = true;\n      draft.retweetDone = false;\n      draft.retweetError = null;\n      break;\n\n    case RETWEET_SUCCESS:\n      {\n        draft.retweetLoading = false;\n        draft.retweetDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n      }\n\n    case RETWEET_FAILURE:\n      draft.retweetLoading = false;\n      draft.retweetError = action.error;\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesDone = false;\n      draft.uploadImagesError = null;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      {\n        draft.imagePaths = draft.imagePaths.concat(action.data); // routes/post에서 res.json으로 받아온 이미지 주소\n\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      }\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n\n    case LIKE_POST_REQUEST:\n      draft.likePostLoading = true;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n      break;\n\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId); // 메인포스트 중에서 전달받은 액션데이터의 포스트아이가 같은 걸 찾아서\n\n        post.Likers.push({\n          id: action.data.UserId\n        }); // 포스트 Likers에 좋아요를 누른 사람(사용자아이디)의 아이디를 넣는다.\n\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n\n    case LIKE_POST_FAILURE:\n      draft.likePostLoading = false;\n      draft.likePostError = action.error;\n      break;\n\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostLoading = true;\n      draft.unlikePostDone = false;\n      draft.unlikePostError = null;\n      break;\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostLoading = false;\n      draft.unlikePostError = action.error;\n      break;\n\n    case LOAD_USER_POSTS_REQUEST:\n    case LOAD_HASHTAG_POSTS_REQUEST:\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = draft.mainPosts.concat(action.data);\n      draft.hasMorePost = action.data.length === 10;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostDone = false;\n      draft.loadPostError = null;\n      break;\n\n    case LOAD_POST_SUCCESS:\n      draft.loadPostLoading = false;\n      draft.loadPostDone = true;\n      draft.singlePost = action.data;\n      draft.hasMorePost = action.data.length === 10;\n      break;\n\n    case LOAD_POST_FAILURE:\n      draft.loadPostLoading = false;\n      draft.loadPostError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.mainPosts.unshift(action.data); // dummyPost를 앞에 추가해야지 게시글이 위로 쌓임;\n\n      draft.addPostDone = true;\n      draft.imagePaths = [];\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostDone = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.postId);\n      draft.removePostDone = true;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostDone = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break; // 불변성을 지키기 위해 아래와 같이 작성했던 코드를 immer를 사용하면 위의 코드로 정리 가능\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = {...state.mainPosts[postIndex]};\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //     ...state,\n        //     mainPosts,\n        //     addCommentLoading : false,\n        //     addCommentDone : true,\n        // };\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentDone = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer; // 불변성을 위해 immer 사용(알아서 불변성을 유지해줌)","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/reducers/post.js"],"names":["produce","initialState","mainPosts","singlePost","imagePaths","hasMorePost","loadPostsLoading","loadPostsDone","loadPostsError","loadPostLoading","loadPostDone","loadPostError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","REMOVE_IMAGE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","filter","v","i","unshift","error","concat","post","find","id","PostId","Likers","push","UserId","length","postId","Comments"],"mappings":"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","sourcesContent":["import produce from \"immer\";\r\n\r\nexport const initialState = {\r\n    mainPosts : [],\r\n    singlePost : null,\r\n    imagePaths : [],\r\n    hasMorePost : true,\r\n    loadPostsLoading : false,\r\n    loadPostsDone : false,\r\n    loadPostsError : null,\r\n    loadPostLoading : false,\r\n    loadPostDone : false,\r\n    loadPostError : null,\r\n    likePostLoading : false,\r\n    likePostDone : false,\r\n    likePostError : null,\r\n    unlikePostLoading : false,\r\n    unlikePostDone : false,\r\n    unlikePostError : null,\r\n    addPostLoading : false,\r\n    addPostDone : false,\r\n    addPostError : null,\r\n    addCommentLoading : false,\r\n    addCommentDone : false,\r\n    addCommentError : null,\r\n    removePostLoading : false,\r\n    removePostDone : false,\r\n    removePostError : null,\r\n    uploadImagesLoading : false,\r\n    uploadImagesDone : false,\r\n    uploadImagesError : null,\r\n    retweetLoading : false,\r\n    retweetDone : false,\r\n    retweetError : null,\r\n}\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\r\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\r\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\r\n\r\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\r\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\r\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\r\n\r\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\r\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\r\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = \"LOAD_USER_POSTS_REQUEST\";\r\nexport const LOAD_USER_POSTS_SUCCESS = \"LOAD_USER_POSTS_SUCCESS\";\r\nexport const LOAD_USER_POSTS_FAILURE = \"LOAD_USER_POSTS_FAILURE\";\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = \"LOAD_HASHTAGE_POSTS_REQUEST\";\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = \"LOAD_HASHTAGE_POSTS_SUCCESS\";\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = \"LOAD_HASHTAGE_POSTS_FAILURE\";\r\n\r\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\r\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\r\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\r\n\r\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\r\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\r\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\r\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\r\nexport const RETWEET_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const addPost = (data) =>({\r\n    type : ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) =>({\r\n    type : ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case REMOVE_IMAGE :\r\n                draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n                break;\r\n            case RETWEET_REQUEST : \r\n                draft.retweetLoading = true;\r\n                draft.retweetDone = false;\r\n                draft.retweetError = null;\r\n                break;\r\n            case RETWEET_SUCCESS : {\r\n                draft.retweetLoading = false;\r\n                draft.retweetDone = true;\r\n                draft.mainPosts.unshift(action.data);\r\n                break;\r\n            }\r\n            case RETWEET_FAILURE : \r\n                draft.retweetLoading = false;\r\n                draft.retweetError = action.error;\r\n                break;\r\n            case UPLOAD_IMAGES_REQUEST : \r\n                draft.uploadImagesLoading = true;\r\n                draft.uploadImagesDone = false;\r\n                draft.uploadImagesError = null;\r\n                break;\r\n            case UPLOAD_IMAGES_SUCCESS : {\r\n                draft.imagePaths = draft.imagePaths.concat(action.data); // routes/post에서 res.json으로 받아온 이미지 주소\r\n                draft.uploadImagesLoading = false;\r\n                draft.uploadImagesDone = true;\r\n                break;\r\n            }\r\n            case UPLOAD_IMAGES_FAILURE : \r\n                draft.uploadImagesLoading = false;\r\n                draft.uploadImagesError = action.error;\r\n                break;\r\n            case LIKE_POST_REQUEST : \r\n                draft.likePostLoading = true;\r\n                draft.likePostDone = false;\r\n                draft.likePostError = null;\r\n                break;\r\n            case LIKE_POST_SUCCESS : {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId); // 메인포스트 중에서 전달받은 액션데이터의 포스트아이가 같은 걸 찾아서\r\n                post.Likers.push({id : action.data.UserId}); // 포스트 Likers에 좋아요를 누른 사람(사용자아이디)의 아이디를 넣는다.\r\n                draft.likePostLoading = false;\r\n                draft.likePostDone = true;\r\n                break;\r\n            }\r\n            case LIKE_POST_FAILURE : \r\n                draft.likePostLoading = false;\r\n                draft.likePostError = action.error;\r\n                break;\r\n            case UNLIKE_POST_REQUEST : \r\n                draft.unlikePostLoading = true;\r\n                draft.unlikePostDone = false;\r\n                draft.unlikePostError = null;\r\n                break;\r\n            case UNLIKE_POST_SUCCESS : {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n                draft.unlikePostLoading = false;\r\n                draft.unlikePostDone = true;\r\n                break;\r\n            }\r\n            case UNLIKE_POST_FAILURE : \r\n                draft.unlikePostLoading = false;\r\n                draft.unlikePostError = action.error;\r\n                break;\r\n            case LOAD_USER_POSTS_REQUEST :\r\n            case LOAD_HASHTAG_POSTS_REQUEST : \r\n            case LOAD_POSTS_REQUEST : \r\n                draft.loadPostsLoading = true;\r\n                draft.loadPostsDone = false;\r\n                draft.loadPostsError = null;\r\n                break;\r\n            case LOAD_POSTS_SUCCESS :\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsDone = true;\r\n                draft.mainPosts = draft.mainPosts.concat(action.data);\r\n                draft.hasMorePost = action.data.length === 10;\r\n                break;\r\n            case LOAD_POSTS_FAILURE : \r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsError = action.error;\r\n                break;\r\n            case LOAD_POST_REQUEST : \r\n                draft.loadPostLoading = true;\r\n                draft.loadPostDone = false;\r\n                draft.loadPostError = null;\r\n                break;\r\n            case LOAD_POST_SUCCESS :\r\n                draft.loadPostLoading = false;\r\n                draft.loadPostDone = true;\r\n                draft.singlePost = action.data;\r\n                draft.hasMorePost = action.data.length === 10;\r\n                break;\r\n            case LOAD_POST_FAILURE : \r\n                draft.loadPostLoading = false;\r\n                draft.loadPostError = action.error;\r\n                break;\r\n            case ADD_POST_REQUEST : \r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS :\r\n                draft.addPostLoading = false;\r\n                draft.mainPosts.unshift(action.data); // dummyPost를 앞에 추가해야지 게시글이 위로 쌓임;\r\n                draft.addPostDone = true;\r\n                draft.imagePaths = [];\r\n                break;\r\n            case ADD_POST_FAILURE : \r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n            case REMOVE_POST_REQUEST : \r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS :\r\n                draft.removePostLoading = false;\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.postId);\r\n                draft.removePostDone = true;\r\n                break;\r\n            case REMOVE_POST_FAILURE : \r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n            case ADD_COMMENT_REQUEST : \r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS : {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Comments.unshift(action.data);\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n                // 불변성을 지키기 위해 아래와 같이 작성했던 코드를 immer를 사용하면 위의 코드로 정리 가능\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = {...state.mainPosts[postIndex]};\r\n                // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post;\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts,\r\n                //     addCommentLoading : false,\r\n                //     addCommentDone : true,\r\n                // };\r\n            }\r\n            case ADD_COMMENT_FAILURE : \r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n            default :\r\n                break;\r\n        }\r\n});\r\n    \r\n\r\n\r\nexport default reducer;\r\n\r\n// 불변성을 위해 immer 사용(알아서 불변성을 유지해줌)"]},"metadata":{},"sourceType":"module"}