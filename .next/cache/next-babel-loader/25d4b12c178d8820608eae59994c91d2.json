{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kimsooin\\\\Desktop\\\\\\uACF5\\uBD80\\uAE30\\uB85D\\\\\\uACF5\\uBD80\\uAE30\\uB85D\\\\22.04 \\uACF5\\uBD80\\uAE30\\uB85D\\\\next-study\\\\front\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { END } from \"redux-saga\";\nimport axios from \"axios\";\nimport { useInView } from \"react-intersection-observer\";\nimport AppLayout from \"../components/AppLayout\";\nimport PostCard from \"../components/PostCard\";\nimport PostForm from \"../components/PostForm\";\nimport { LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport wrapper from \"../store/configureStore\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePost,\n    loadPostsLoading,\n    retweetError\n  } = useSelector(state => state.post);\n  const [ref, inView] = useInView();\n  useEffect(() => {\n    if (inView && hasMorePost && !loadPostsLoading) {\n      var _mainPosts;\n\n      const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n      dispatch({\n        type: LOAD_POSTS_REQUEST,\n        lastId\n      });\n    }\n\n    console.log(hasMorePost);\n  }, [inView, hasMorePost, loadPostsLoading, mainPosts]);\n  useEffect(() => {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  return __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, me && __jsx(PostForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 20\n    }\n  }), mainPosts.map(post => __jsx(PostCard, {\n    key: post.id,\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 38\n    }\n  })), __jsx(\"div\", {\n    ref: hasMorePost && !loadPostsLoading ? ref : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(store => async ({\n  req\n}) => {\n  const cookie = req ? req.headers.cookie : ''; // 쿠키 정보를 변수에 저장\n\n  console.log(cookie);\n  axios.defaults.headers.Cookie = '';\n\n  if (req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  });\n  store.dispatch(END); // 디스패치가 성공하기까지 시간을 벌어주기 위해 적용\n\n  await store.sagaTask.toPromise();\n}); // 서버사이드렌더링을 위한 준비 (Home보다 먼저 실행된다.)\n// 서버사이드렌더링은 처음 렌더링 시 백엔드까지 한번에 갔다가 응답을 받아와 브라우저에서 요청을 두번 하지 않아도돼\n// 초기 로딩 속도가 빨라지는 장점이 있다.\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/pages/index.js"],"names":["React","useEffect","useDispatch","useSelector","END","axios","useInView","AppLayout","PostCard","PostForm","LOAD_MY_INFO_REQUEST","LOAD_POSTS_REQUEST","wrapper","Home","dispatch","me","state","user","mainPosts","hasMorePost","loadPostsLoading","retweetError","post","ref","inView","lastId","length","id","type","console","log","alert","map","undefined","getServerSideProps","store","req","cookie","headers","defaults","Cookie","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { END } from \"redux-saga\";\r\nimport axios from \"axios\";\r\nimport { useInView } from \"react-intersection-observer\";\r\n\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport PostCard from \"../components/PostCard\";\r\nimport PostForm from \"../components/PostForm\";\r\nimport { LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\r\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\r\nimport wrapper from \"../store/configureStore\";\r\n\r\nconst Home = () => {\r\n    const dispatch = useDispatch();\r\n    const { me } = useSelector((state) => state.user); \r\n    const { mainPosts, hasMorePost, loadPostsLoading, retweetError } = useSelector((state) => state.post); \r\n    const [ref,inView] = useInView();\r\n\r\n    useEffect(\r\n        () => {\r\n          if (inView && hasMorePost && !loadPostsLoading) {\r\n            const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n            dispatch({\r\n              type: LOAD_POSTS_REQUEST,\r\n              lastId,\r\n            });\r\n          }\r\n          console.log(hasMorePost);\r\n        },[inView, hasMorePost, loadPostsLoading, mainPosts]);\r\n\r\n    useEffect(() => {\r\n        if(retweetError) {\r\n            alert(retweetError);\r\n        }\r\n    },[retweetError])\r\n\r\n    return(\r\n        <AppLayout>\r\n            {me && <PostForm />}\r\n            {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\r\n            <div ref={hasMorePost && !loadPostsLoading ? ref : undefined} />\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps( (store) => async ({req}) => {\r\n    const cookie = req ? req.headers.cookie : ''; // 쿠키 정보를 변수에 저장\r\n    console.log(cookie);\r\n    axios.defaults.headers.Cookie = '';\r\n    if(req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n    store.dispatch({\r\n        type : LOAD_MY_INFO_REQUEST,\r\n    });\r\n    store.dispatch({\r\n        type : LOAD_POSTS_REQUEST,\r\n    });\r\n    store.dispatch(END); // 디스패치가 성공하기까지 시간을 벌어주기 위해 적용\r\n    await store.sagaTask.toPromise();\r\n\r\n}); \r\n\r\n// 서버사이드렌더링을 위한 준비 (Home보다 먼저 실행된다.)\r\n// 서버사이드렌더링은 처음 렌더링 시 백엔드까지 한번에 갔다가 응답을 받아와 브라우저에서 요청을 두번 하지 않아도돼\r\n// 초기 로딩 속도가 빨라지는 장점이 있다.\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}