{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, delay, takeLatest, put } from 'redux-saga/effects';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data) \n    yield delay(1000);\n    yield put({\n      type: ADD_POST_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.reponse.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${id}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data) \n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.reponse.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/sagas/post.js"],"names":["axios","all","fork","delay","takeLatest","put","addPostAPI","data","post","addPost","action","type","ADD_POST_SUCCESS","err","ADD_POST_FAILURE","reponse","addCommentAPI","id","addComment","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","watchAddPost","ADD_POST_REQUEST","watchAddComment","ADD_COMMENT_REQUEST","postSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,KAAnB,EAA0BC,UAA1B,EAAsCC,GAAtC,QAAgD,oBAAhD;;AAGA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOP,KAAK,CAACQ,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AACtB,MAAI;AACA;AACA,UAAMP,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNM,MAAAA,IAAI,EAAGC;AADD,KAAD,CAAT;AAGH,GAND,CAME,OAAMC,GAAN,EAAW;AACT,UAAMR,GAAG,CAAC;AACNM,MAAAA,IAAI,EAAGG,gBADD;AAENP,MAAAA,IAAI,EAAGM,GAAG,CAACE,OAAJ,CAAYR;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASS,aAAT,CAAuBT,IAAvB,EAA6B;AACzB,SAAOP,KAAK,CAACQ,IAAN,CAAY,aAAYS,EAAG,UAA3B,EAAsCV,IAAtC,CAAP;AACH;;AAED,UAAUW,UAAV,CAAqBR,MAArB,EAA6B;AACzB,MAAI;AACA;AACA,UAAMP,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNM,MAAAA,IAAI,EAAGQ;AADD,KAAD,CAAT;AAGH,GAND,CAME,OAAMN,GAAN,EAAW;AACT,UAAMR,GAAG,CAAC;AACNM,MAAAA,IAAI,EAAGS,mBADD;AAENb,MAAAA,IAAI,EAAGM,GAAG,CAACE,OAAJ,CAAYR;AAFb,KAAD,CAAT;AAIH;AACJ;;AAGD,UAAUc,YAAV,GAAyB;AACrB,QAAMjB,UAAU,CAACkB,gBAAD,EAAmBb,OAAnB,CAAhB;AACH;;AAED,UAAUc,eAAV,GAA4B;AACxB,QAAMnB,UAAU,CAACoB,mBAAD,EAAsBN,UAAtB,CAAhB;AACH;;AAED,eAAe,UAAUO,QAAV,GAAqB;AAChC,QAAMxB,GAAG,CAAC,CACNC,IAAI,CAACmB,YAAD,CADE,EAENnB,IAAI,CAACqB,eAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import axios from 'axios';\r\nimport {all, fork, delay, takeLatest, put} from 'redux-saga/effects';\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data) \r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data) \r\n        yield delay(1000);\r\n        yield put({\r\n            type : ADD_POST_SUCCESS,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : ADD_POST_FAILURE,\r\n            data : err.reponse.data \r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${id}/comment`, data); \r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data) \r\n        yield delay(1000);\r\n        yield put({\r\n            type : ADD_COMMENT_SUCCESS,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : ADD_COMMENT_FAILURE,\r\n            data : err.reponse.data \r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}