{"ast":null,"code":"import axios, { Axios } from 'axios';\nimport { all, fork, put } from 'redux-saga/effects';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data); // 로그인 요청 보냄\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data) // 로그인 요청에 대한 결과값을 받아서 변수에 저장\n    yield delay(1000);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: action.data // data : result.data // 로그인 성공시 결과값 안에 들어있는 data\n\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.reponse.data // 로그인 실패시 결과값 안에 들어있는 data\n\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\");\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/sagas/user.js"],"names":["axios","Axios","all","fork","put","logInAPI","data","post","logIn","action","delay","type","err","reponse","watchLogIn","takeLatest","watchLogOut","userSaga"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,KAAhB,QAA6B,OAA7B;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,QAA6B,oBAA7B;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAON,KAAK,CAACO,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP,CADoB,CACmB;AAC1C;;AAGD,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACA;AACA,UAAMC,KAAK,CAAC,IAAD,CAAX;AACA,UAAMN,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAG,gBADD;AAENL,MAAAA,IAAI,EAAGG,MAAM,CAACH,IAFR,CAGN;;AAHM,KAAD,CAAT;AAKH,GARD,CAQE,OAAMM,GAAN,EAAW;AACT,UAAMR,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAG,gBADD;AAENL,MAAAA,IAAI,EAAGM,GAAG,CAACC,OAAJ,CAAYP,IAFb,CAEkB;;AAFlB,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUQ,UAAV,GAAuB;AACnB,QAAMC,UAAU,CAAC,gBAAD,EAAmBP,KAAnB,CAAhB;AACH;;AAED,UAAUQ,WAAV,GAAwB;AACpB,QAAMD,UAAU,CAAC,iBAAD,CAAhB;AACH;;AAGD,eAAe,UAAUE,QAAV,GAAqB;AAChC,QAAMf,GAAG,CAAC,CACNC,IAAI,CAACW,UAAD,CADE,EAENX,IAAI,CAACa,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import axios, { Axios } from 'axios';\r\nimport {all, fork, put} from 'redux-saga/effects';\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/api/login', data); // 로그인 요청 보냄\r\n}\r\n\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        // const result = yield call(logInAPI, action.data) // 로그인 요청에 대한 결과값을 받아서 변수에 저장\r\n        yield delay(1000);\r\n        yield put({\r\n            type : 'LOG_IN_SUCCESS',\r\n            data : action.data,\r\n            // data : result.data // 로그인 성공시 결과값 안에 들어있는 data\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : 'LOG_IN_FAILURE',\r\n            data : err.reponse.data // 로그인 실패시 결과값 안에 들어있는 data\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n    yield takeLatest(\"LOG_IN_REQUEST\", logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeLatest(\"LOG_OUT_REQUEST\");\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}