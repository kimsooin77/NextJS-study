{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport axios, { Axios } from 'axios';\nimport { all, fork, put } from 'redux-saga/effects';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data); // 로그인 요청 보냄\n}\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: 'LOG_IN_SUCCESS',\n            data: action.data // data : result.data // 로그인 성공시 결과값 안에 들어있는 data\n\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: 'LOG_IN_FAILURE',\n            data: _context.t0.reponse.data // 로그인 실패시 결과값 안에 들어있는 data\n\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(\"LOG_IN_REQUEST\", logIn);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(\"LOG_OUT_REQUEST\", logOut);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/sagas/user.js"],"names":["logIn","watchLogIn","watchLogOut","userSaga","axios","Axios","all","fork","put","logInAPI","data","post","action","delay","type","reponse","takeLatest","logOut"],"mappings":";;oDAQUA,K;qDAiBAC,U;qDAIAC,W;qDAKeC,Q;;AAlCzB,OAAOC,KAAP,IAAgBC,KAAhB,QAA6B,OAA7B;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,QAA6B,oBAA7B;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAON,KAAK,CAACO,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP,CADoB,CACmB;AAC1C;;AAGD,SAAUV,KAAV,CAAgBY,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMC,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAML,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAG,gBADD;AAENJ,YAAAA,IAAI,EAAGE,MAAM,CAACF,IAFR,CAGN;;AAHM,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUQ,iBAAMF,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAG,gBADD;AAENJ,YAAAA,IAAI,EAAG,YAAIK,OAAJ,CAAYL,IAFb,CAEkB;;AAFlB,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUT,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMe,UAAU,CAAC,gBAAD,EAAmBhB,KAAnB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUE,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMc,UAAU,CAAC,iBAAD,EAAoBC,MAApB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUd,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMG,GAAG,CAAC,CACNC,IAAI,CAACN,UAAD,CADE,EAENM,IAAI,CAACL,WAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios, { Axios } from 'axios';\r\nimport {all, fork, put} from 'redux-saga/effects';\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/api/login', data); // 로그인 요청 보냄\r\n}\r\n\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        // const result = yield call(logInAPI, action.data) // 로그인 요청에 대한 결과값을 받아서 변수에 저장\r\n        yield delay(1000);\r\n        yield put({\r\n            type : 'LOG_IN_SUCCESS',\r\n            data : action.data,\r\n            // data : result.data // 로그인 성공시 결과값 안에 들어있는 data\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : 'LOG_IN_FAILURE',\r\n            data : err.reponse.data // 로그인 실패시 결과값 안에 들어있는 data\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n    yield takeLatest(\"LOG_IN_REQUEST\", logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}