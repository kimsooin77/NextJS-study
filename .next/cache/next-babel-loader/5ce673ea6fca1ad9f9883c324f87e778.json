{"ast":null,"code":"var __jsx = React.createElement;\nimport { EllipsisOutlined, HeartOutlined, HeartTwoTone, MessageOutlined, RetweetOutlined } from \"@ant-design/icons\";\nimport { Avatar, Button, Card, Comment, List, Popover } from \"antd\";\nimport React, { useCallback, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Link from \"next/link\";\nimport moment from \"moment\";\nimport PostImages from \"./PostImages\";\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from \"../reducers/post\";\nimport FollowButton from \"./FollowButton\";\nmoment.locale('ko');\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    removePostLoading\n  } = useSelector(state => state.post);\n  const {\n    0: commentFormOpend,\n    1: setCommentFormOpend\n  } = useState(false);\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  const onLike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onUnLike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onToggleComment = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    setCommentFormOpend(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const liked = post.Likers.find(v => v.id === id); // 좋아요 누른 사람들의 아이디 중 내 아이디와 같은 아이디가 있는지 찾음.\n\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      onClick: onRetweet\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"eb2f96\",\n      key: \"heart\",\n      onClick: onUnLike\n    }) // 있으면 취소\n    : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike\n    }), // 없으면 좋아요 누르기\n    __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, null, id && post.User.id === id ? __jsx(React.Fragment, null, __jsx(Button, null, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        onClick: onRemovePost\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, null, \"\\uC2E0\\uACE0\"))\n    }, __jsx(EllipsisOutlined, null))],\n    title: post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null,\n    extra: id && __jsx(FollowButton, {\n      post: post\n    })\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(\"div\", {\n    style: {\n      float: 'right'\n    }\n  }, moment(post.createdAt).format('YYYY.MM.DD')), __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: `/user/${post.Retweet.User.id}`,\n      prefetch: false\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    })\n  })) : __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: {\n      float: 'right'\n    }\n  }, moment(post.createdAt).fromNow()), __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: `/user/${post.User.id}`,\n      prefetch: false\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    })\n  }))), commentFormOpend && __jsx(\"div\", null, __jsx(CommentForm, {\n    post: post\n  }), __jsx(List, {\n    header: `${post.Comments.length}개의 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: item => __jsx(\"li\", null, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        href: `/user/${item.User.id}`,\n        prefetch: false\n      }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n      content: item.content\n    }))\n  })));\n};\n\nexport default PostCard; // 배열 안에서 JSX들을 넣을때는 key를 붙여야함.\n// propTypes 안에 object 안에 속성들을 다 표기 해주고 싶을 때 shape","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/components/PostCard.js"],"names":["EllipsisOutlined","HeartOutlined","HeartTwoTone","MessageOutlined","RetweetOutlined","Avatar","Button","Card","Comment","List","Popover","React","useCallback","useState","useDispatch","useSelector","Link","moment","PostImages","CommentForm","PostCardContent","REMOVE_POST_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","FollowButton","locale","PostCard","post","dispatch","removePostLoading","state","commentFormOpend","setCommentFormOpend","id","user","me","onLike","alert","type","data","onUnLike","onToggleComment","prev","onRemovePost","onRetweet","liked","Likers","find","v","marginBottom","Images","User","RetweetId","nickname","Retweet","float","createdAt","format","content","fromNow","Comments","length","item"],"mappings":"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","sourcesContent":["import { EllipsisOutlined, HeartOutlined, HeartTwoTone, MessageOutlined, RetweetOutlined } from \"@ant-design/icons\";\r\nimport { Avatar, Button, Card, Comment, List, Popover } from \"antd\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport propTypes from 'prop-types';\r\nimport Link from \"next/link\";\r\nimport moment from \"moment\";\r\n\r\nimport PostImages from \"./PostImages\";\r\nimport CommentForm from './CommentForm';\r\nimport PostCardContent from './PostCardContent';\r\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from \"../reducers/post\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\nmoment.locale('ko');\r\n\r\nconst PostCard = ({post}) => {\r\n    const dispatch = useDispatch();\r\n    const { removePostLoading } = useSelector((state) => state.post);\r\n    const [commentFormOpend, setCommentFormOpend] = useState(false);\r\n    const id = useSelector((state) => state.user.me?.id);\r\n\r\n    const onLike = useCallback(() => {\r\n        if(!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type : LIKE_POST_REQUEST,\r\n            data : post.id,\r\n        })\r\n    },[id]);\r\n    const onUnLike = useCallback(() => {\r\n        if(!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type : UNLIKE_POST_REQUEST,\r\n            data : post.id,\r\n        })\r\n    },[id]);\r\n    const onToggleComment = useCallback(() => {\r\n        if(!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        setCommentFormOpend((prev) => !prev)\r\n    },[])\r\n\r\n    const onRemovePost = useCallback(() => {\r\n        if(!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type : REMOVE_POST_REQUEST,\r\n            data : post.id,\r\n        })\r\n    },[id]);\r\n\r\n    const onRetweet = useCallback(() => {\r\n        if(!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type : RETWEET_REQUEST,\r\n            data : post.id,\r\n        })\r\n    },[id]);\r\n\r\n    const liked = post.Likers.find((v) => v.id === id); // 좋아요 누른 사람들의 아이디 중 내 아이디와 같은 아이디가 있는지 찾음.\r\n    return(\r\n        <div style={{marginBottom : 20}}>\r\n            <Card\r\n                cover={post.Images[0] && <PostImages images={post.Images} />}\r\n                actions={[\r\n                    <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\r\n                    liked \r\n                        ? <HeartTwoTone twoToneColor=\"eb2f96\" key=\"heart\" onClick={onUnLike} /> // 있으면 취소\r\n                        : <HeartOutlined key=\"heart\" onClick={onLike} />, // 없으면 좋아요 누르기\r\n                    <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\r\n                    <Popover key=\"more\" content={(\r\n                        <Button.Group>\r\n                            {\r\n                                id && post.User.id === id \r\n                                ? \r\n                                (\r\n                                    <>\r\n                                        <Button>수정</Button>\r\n                                        <Button type=\"danger\" onClick={onRemovePost}>삭제</Button>\r\n                                    </>\r\n                                )\r\n                                : \r\n                                <Button>신고</Button>\r\n                            }\r\n                        </Button.Group>\r\n                    )}>\r\n                        <EllipsisOutlined />\r\n                    </Popover>\r\n                ]}\r\n                title={post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null}\r\n                extra={id && <FollowButton post={post} />}\r\n            >\r\n\r\n                {\r\n                    post.RetweetId && post.Retweet\r\n                    ? (\r\n                        <Card\r\n                        cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\r\n                        >\r\n                            <div style={{float : 'right'}}>{moment(post.createdAt).format('YYYY.MM.DD')}</div>\r\n                            <Card.Meta\r\n                                avatar={(\r\n                                    <Link href={`/user/${post.Retweet.User.id}`} prefetch={false}>\r\n                                        <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a>\r\n                                    </Link>\r\n                                )}\r\n                                title={post.Retweet.User.nickname}\r\n                                description={<PostCardContent postData={post.Retweet.content} />}\r\n                            />\r\n                        </Card>\r\n                    )\r\n                    : (\r\n                        <>\r\n                            <div style={{float : 'right'}}>{moment(post.createdAt).fromNow()}</div>\r\n                            <Card.Meta\r\n                            avatar={(\r\n                                <Link href={`/user/${post.User.id}`} prefetch={false}>\r\n                                    <a><Avatar>{post.User.nickname[0]}</Avatar></a>\r\n                                </Link>\r\n                            )\r\n                                \r\n                            }\r\n                            title={post.User.nickname}\r\n                            description={<PostCardContent postData={post.content} />}\r\n                            />\r\n                        </>\r\n                    )\r\n                }\r\n\r\n                \r\n            </Card>\r\n            {commentFormOpend && (\r\n                <div>\r\n                    <CommentForm post={post} />\r\n                    <List \r\n                        header={`${post.Comments.length}개의 댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments}\r\n                        renderItem={(item) => (\r\n                            <li>\r\n                                <Comment \r\n                                    author={item.User.nickname}\r\n                                    avatar={(\r\n                                        <Link href={`/user/${item.User.id}`} prefetch={false}>\r\n                                            <a><Avatar>{item.User.nickname[0]}</Avatar></a>\r\n                                        </Link>\r\n                                    )\r\n                                        \r\n                                    }\r\n                                    content={item.content}\r\n                                />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n};\r\n\r\nPostCard.propTypes = {\r\n    post : propTypes.shape({\r\n        id : propTypes.number,\r\n        User : propTypes.object,\r\n        content : propTypes.string,\r\n        createdAt : propTypes.string,\r\n        Comments : propTypes.arrayOf(propTypes.object),\r\n        Images : propTypes.arrayOf(propTypes.object),\r\n        Likers : propTypes.arrayOf(propTypes.object),\r\n        RetweetId : propTypes.number,\r\n        Retweet : propTypes.objectOf(propTypes.any),\r\n    }).isRequired,\r\n};\r\n\r\nexport default PostCard;\r\n\r\n// 배열 안에서 JSX들을 넣을때는 key를 붙여야함.\r\n// propTypes 안에 object 안에 속성들을 다 표기 해주고 싶을 때 shape"]},"metadata":{},"sourceType":"module"}