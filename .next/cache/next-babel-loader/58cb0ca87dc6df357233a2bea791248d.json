{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\kimsooin\\\\Desktop\\\\\\uACF5\\uBD80\\uAE30\\uB85D\\\\\\uACF5\\uBD80\\uAE30\\uB85D\\\\22.04 \\uACF5\\uBD80\\uAE30\\uB85D\\\\next-study\\\\front\\\\components\\\\PostCard.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { EllipsisOutlined, HeartOutlined, HeartTwoTone, MessageOutlined, RetweetOutlined } from \"@ant-design/icons\";\nimport { Avatar, Button, Card, Comment, List, Popover } from \"antd\";\nimport React, { useCallback, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport propTypes from 'prop-types';\nimport PostImages from \"./PostImages\";\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST } from \"../reducers/post\";\nimport FollowButton from \"./FollowButton\";\n\nvar PostCard = function PostCard(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var dispatch = useDispatch();\n\n  var _useState = useState(false),\n      commentFormOpend = _useState[0],\n      setCommentFormOpend = _useState[1];\n\n  var onLike = useCallback(function () {\n    dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  var onUnLike = useCallback(function () {\n    dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpend(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onRemovePost = useCallback(function () {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  var liked = post.Likers.find(function (v) {\n    return v.id === id;\n  }); // 좋아요 누른 사람들의 아이디 중 내 아이디와 같은 아이디가 있는지 찾음.\n\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 42\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"eb2f96\",\n      key: \"heart\",\n      onClick: onUnLike,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 27\n      }\n    }) // 있으면 취소\n    : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 27\n      }\n    }), // 없으면 좋아요 누르기\n    __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }\n      }, id && post.User.id === id ? __jsx(React.Fragment, null, __jsx(Button, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 41\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        onClick: onRemovePost,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 41\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 33\n        }\n      }, \"\\uC2E0\\uACE0\")),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }\n    }))],\n    extra: id && __jsx(FollowButton, {\n      post: post,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 30\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 29\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 34\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  })), commentFormOpend && __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, __jsx(CommentForm, {\n    post: post,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }), __jsx(List, {\n    header: \"\".concat(post.Comments.length, \"\\uAC1C\\uC758 \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 29\n        }\n      }, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Avatar, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 45\n          }\n        }, item.User.nickname[0]),\n        content: item.content,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 33\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }\n  })));\n};\n\n_s(PostCard, \"P28PQv2JcOu+m372wxlrDbSYeBU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = PostCard;\nPostCard.propTypes = {\n  post: propTypes.shape({\n    id: propTypes.number,\n    User: propTypes.object,\n    content: propTypes.string,\n    createdAt: propTypes.string,\n    Comments: propTypes.arrayOf(propTypes.object),\n    Images: propTypes.arrayOf(propTypes.object),\n    Likers: propTypes.arrayOf(propTypes.object)\n  }).isRequired\n};\nexport default PostCard; // 배열 안에서 JSX들을 넣을때는 key를 붙여야함.\n// propTypes 안에 object 안에 속성들을 다 표기 해주고 싶을 때 shape\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCard\");","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/components/PostCard.js"],"names":["EllipsisOutlined","HeartOutlined","HeartTwoTone","MessageOutlined","RetweetOutlined","Avatar","Button","Card","Comment","List","Popover","React","useCallback","useState","useDispatch","useSelector","propTypes","PostImages","CommentForm","PostCardContent","REMOVE_POST_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","FollowButton","PostCard","post","dispatch","commentFormOpend","setCommentFormOpend","onLike","type","data","id","onUnLike","onToggleComment","prev","onRemovePost","state","user","me","liked","Likers","find","v","marginBottom","Images","User","nickname","content","Comments","length","item","shape","number","object","string","createdAt","arrayOf","isRequired"],"mappings":"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","sourcesContent":["import { EllipsisOutlined, HeartOutlined, HeartTwoTone, MessageOutlined, RetweetOutlined } from \"@ant-design/icons\";\r\nimport { Avatar, Button, Card, Comment, List, Popover } from \"antd\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport propTypes from 'prop-types';\r\nimport PostImages from \"./PostImages\";\r\nimport CommentForm from './CommentForm';\r\nimport PostCardContent from './PostCardContent';\r\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST } from \"../reducers/post\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\nconst PostCard = ({post}) => {\r\n    const dispatch = useDispatch();\r\n    const [commentFormOpend, setCommentFormOpend] = useState(false);\r\n    const onLike = useCallback(() => {\r\n        dispatch({\r\n            type : LIKE_POST_REQUEST,\r\n            data : post.id,\r\n        })\r\n    },[]);\r\n    const onUnLike = useCallback(() => {\r\n        dispatch({\r\n            type : UNLIKE_POST_REQUEST,\r\n            data : post.id,\r\n        })\r\n    },[]);\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpend((prev) => !prev)\r\n    },[])\r\n\r\n    const onRemovePost = useCallback(() => {\r\n        dispatch({\r\n            type : REMOVE_POST_REQUEST,\r\n            data : post.id,\r\n        })\r\n    },[]);\r\n\r\n    const id = useSelector((state) => state.user.me?.id);\r\n    const liked = post.Likers.find((v) => v.id === id); // 좋아요 누른 사람들의 아이디 중 내 아이디와 같은 아이디가 있는지 찾음.\r\n    return(\r\n        <div style={{marginBottom : 20}}>\r\n            <Card\r\n                cover={post.Images[0] && <PostImages images={post.Images} />}\r\n                actions={[\r\n                    <RetweetOutlined key=\"retweet\" />,\r\n                    liked \r\n                        ? <HeartTwoTone twoToneColor=\"eb2f96\" key=\"heart\" onClick={onUnLike} /> // 있으면 취소\r\n                        : <HeartOutlined key=\"heart\" onClick={onLike} />, // 없으면 좋아요 누르기\r\n                    <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\r\n                    <Popover key=\"more\" content={(\r\n                        <Button.Group>\r\n                            {\r\n                                id && post.User.id === id \r\n                                ? \r\n                                (\r\n                                    <>\r\n                                        <Button>수정</Button>\r\n                                        <Button type=\"danger\" onClick={onRemovePost}>삭제</Button>\r\n                                    </>\r\n                                )\r\n                                : \r\n                                <Button>신고</Button>\r\n                            }\r\n                        </Button.Group>\r\n                    )}>\r\n                        <EllipsisOutlined />\r\n                    </Popover>\r\n                ]}\r\n                extra={id && <FollowButton post={post} />}\r\n            >\r\n\r\n                <Card.Meta\r\n                    avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                    title={post.User.nickname}\r\n                    description={<PostCardContent postData={post.content} />}\r\n                />\r\n            </Card>\r\n            {commentFormOpend && (\r\n                <div>\r\n                    <CommentForm post={post} />\r\n                    <List \r\n                        header={`${post.Comments.length}개의 댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments}\r\n                        renderItem={(item) => (\r\n                            <li>\r\n                                <Comment \r\n                                    author={item.User.nickname}\r\n                                    avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                    content={item.content}\r\n                                />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n};\r\n\r\nPostCard.propTypes = {\r\n    post : propTypes.shape({\r\n        id : propTypes.number,\r\n        User : propTypes.object,\r\n        content : propTypes.string,\r\n        createdAt : propTypes.string,\r\n        Comments : propTypes.arrayOf(propTypes.object),\r\n        Images : propTypes.arrayOf(propTypes.object),\r\n        Likers : propTypes.arrayOf(propTypes.object),\r\n    }).isRequired,\r\n};\r\n\r\nexport default PostCard;\r\n\r\n// 배열 안에서 JSX들을 넣을때는 key를 붙여야함.\r\n// propTypes 안에 object 안에 속성들을 다 표기 해주고 싶을 때 shape"]},"metadata":{},"sourceType":"module"}