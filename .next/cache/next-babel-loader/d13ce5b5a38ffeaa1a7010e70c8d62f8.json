{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\kimsooin\\\\Desktop\\\\\\uACF5\\uBD80\\uAE30\\uB85D\\\\\\uACF5\\uBD80\\uAE30\\uB85D\\\\22.04 \\uACF5\\uBD80\\uAE30\\uB85D\\\\next-study\\\\front\\\\pages\\\\index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useInView } from \"react-intersection-observer\";\nimport AppLayout from \"../components/AppLayout\";\nimport PostCard from \"../components/PostCard\";\nimport PostForm from \"../components/PostForm\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\n\nvar Home = function Home() {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePost = _useSelector2.hasMorePost,\n      loadPostsLoading = _useSelector2.loadPostsLoading,\n      retweetError = _useSelector2.retweetError;\n\n  var _useInView = useInView(),\n      _useInView2 = _slicedToArray(_useInView, 2),\n      ref = _useInView2[0],\n      inView = _useInView2[1];\n\n  useEffect(function () {\n    if (inView && hasMorePost && !loadPostsLoading) {\n      var _mainPosts;\n\n      var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n      dispatch({\n        type: LOAD_POSTS_REQUEST,\n        lastId: lastId\n      });\n    }\n  }, [inView, hasMorePost, loadPostsLoading, mainPosts]);\n  useEffect(function () {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  return __jsx(AppLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, me && __jsx(PostForm, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 20\n    }\n  }), mainPosts.map(function (post) {\n    return __jsx(PostCard, {\n      key: post.id,\n      post: post,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 38\n      }\n    });\n  }), __jsx(\"div\", {\n    ref: hasMorePost && !loadPostsLoading ? ref : undefined,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }));\n};\n\n_s(Home, \"Zl34ssldpaYPVKNbo50+3V+2huo=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useInView];\n});\n\n_c = Home;\n// 서버사이드렌더링을 위한 준비 (Home보다 먼저 실행된다.)\n// 서버사이드렌더링은 처음 렌더링 시 백엔드까지 한번에 갔다가 응답을 받아와 브라우저에서 요청을 두번 하지 않아도돼\n// 초기 로딩 속도가 빨라지는 장점이 있다.\nexport var __N_SSP = true;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/pages/index.js"],"names":["React","useEffect","useDispatch","useSelector","useInView","AppLayout","PostCard","PostForm","LOAD_POSTS_REQUEST","Home","dispatch","state","user","me","post","mainPosts","hasMorePost","loadPostsLoading","retweetError","ref","inView","lastId","length","id","type","alert","map","undefined"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAGA,SAASC,SAAT,QAA0B,6BAA1B;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AAEA,SAASC,kBAAT,QAAmC,kBAAnC;;AAGA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AACf,MAAMC,QAAQ,GAAGR,WAAW,EAA5B;;AACA,qBAAeC,WAAW,CAAC,UAACQ,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAA1B;AAAA,MAAQC,EAAR,gBAAQA,EAAR;;AACA,sBAAmEV,WAAW,CAAC,UAACQ,KAAD;AAAA,WAAWA,KAAK,CAACG,IAAjB;AAAA,GAAD,CAA9E;AAAA,MAAQC,SAAR,iBAAQA,SAAR;AAAA,MAAmBC,WAAnB,iBAAmBA,WAAnB;AAAA,MAAgCC,gBAAhC,iBAAgCA,gBAAhC;AAAA,MAAkDC,YAAlD,iBAAkDA,YAAlD;;AACA,mBAAqBd,SAAS,EAA9B;AAAA;AAAA,MAAOe,GAAP;AAAA,MAAWC,MAAX;;AAEAnB,EAAAA,SAAS,CACL,YAAM;AACJ,QAAImB,MAAM,IAAIJ,WAAV,IAAyB,CAACC,gBAA9B,EAAgD;AAAA;;AAC9C,UAAMI,MAAM,iBAAGN,SAAS,CAACA,SAAS,CAACO,MAAV,GAAmB,CAApB,CAAZ,+CAAG,WAAiCC,EAAhD;AACAb,MAAAA,QAAQ,CAAC;AACPc,QAAAA,IAAI,EAAEhB,kBADC;AAEPa,QAAAA,MAAM,EAANA;AAFO,OAAD,CAAR;AAID;AACF,GATI,EASH,CAACD,MAAD,EAASJ,WAAT,EAAsBC,gBAAtB,EAAwCF,SAAxC,CATG,CAAT;AAWAd,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAGiB,YAAH,EAAiB;AACbO,MAAAA,KAAK,CAACP,YAAD,CAAL;AACH;AACJ,GAJQ,EAIP,CAACA,YAAD,CAJO,CAAT;AAMA,SACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKL,EAAE,IAAI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADX,EAEKE,SAAS,CAACW,GAAV,CAAc,UAACZ,IAAD;AAAA,WAAU,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,IAAI,CAACS,EAApB;AAAwB,MAAA,IAAI,EAAET,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAV;AAAA,GAAd,CAFL,EAGI;AAAK,IAAA,GAAG,EAAEE,WAAW,IAAI,CAACC,gBAAhB,GAAmCE,GAAnC,GAAyCQ,SAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ;AAOH,CA9BD;;GAAMlB,I;UACeP,W,EACFC,W,EACoDA,W,EAC9CC,S;;;KAJnBK,I;AAmDN;AACA;AACA;;AAEA,eAAeA,IAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { END } from \"redux-saga\";\r\nimport axios from \"axios\";\r\nimport { useInView } from \"react-intersection-observer\";\r\n\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport PostCard from \"../components/PostCard\";\r\nimport PostForm from \"../components/PostForm\";\r\nimport { LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\r\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\r\nimport wrapper from \"../store/configureStore\";\r\n\r\nconst Home = () => {\r\n    const dispatch = useDispatch();\r\n    const { me } = useSelector((state) => state.user); \r\n    const { mainPosts, hasMorePost, loadPostsLoading, retweetError } = useSelector((state) => state.post); \r\n    const [ref,inView] = useInView();\r\n\r\n    useEffect(\r\n        () => {\r\n          if (inView && hasMorePost && !loadPostsLoading) {\r\n            const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n            dispatch({\r\n              type: LOAD_POSTS_REQUEST,\r\n              lastId,\r\n            });\r\n          }\r\n        },[inView, hasMorePost, loadPostsLoading, mainPosts]);\r\n\r\n    useEffect(() => {\r\n        if(retweetError) {\r\n            alert(retweetError);\r\n        }\r\n    },[retweetError])\r\n\r\n    return(\r\n        <AppLayout>\r\n            {me && <PostForm />}\r\n            {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\r\n            <div ref={hasMorePost && !loadPostsLoading ? ref : undefined} />\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps( (store) => async ({req}) => {\r\n    const cookie = req ? req.headers.cookie : ''; // 쿠키 정보를 변수에 저장\r\n    console.log(cookie);\r\n    axios.defaults.headers.Cookie = '';\r\n    if(req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n    store.dispatch({\r\n        type : LOAD_MY_INFO_REQUEST,\r\n    });\r\n    store.dispatch({\r\n        type : LOAD_POSTS_REQUEST,\r\n    });\r\n    store.dispatch(END); // 디스패치가 성공하기까지 시간을 벌어주기 위해 적용\r\n    await store.sagaTask.toPromise();\r\n\r\n}); \r\n\r\n// 서버사이드렌더링을 위한 준비 (Home보다 먼저 실행된다.)\r\n// 서버사이드렌더링은 처음 렌더링 시 백엔드까지 한번에 갔다가 응답을 받아와 브라우저에서 요청을 두번 하지 않아도돼\r\n// 초기 로딩 속도가 빨라지는 장점이 있다.\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}