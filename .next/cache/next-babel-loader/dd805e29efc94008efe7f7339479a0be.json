{"ast":null,"code":"import shortid from \"shortid\";\nimport produce from \"immer\";\nimport faker from 'faker';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortid.generate(),\n  User: {\n    id: shortid.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortid.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.hasMorePost = draft.mainPosts.length < 50;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.mainPosts.unshift(action.data); // dummyPost를 앞에 추가해야지 게시글이 위로 쌓임;\n\n      draft.addPostDone = true;\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostDone = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      draft.removePostDone = true;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostDone = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addcommentd = true;\n        break; // 불변성을 지키기 위해 아래와 같이 작성했던 코드를 immer를 사용하면 위의 코드로 정리 가능\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = {...state.mainPosts[postIndex]};\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //     ...state,\n        //     mainPosts,\n        //     addCommentLoading : false,\n        //     addCommentDone : true,\n        // };\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentDone = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer; // 불변성을 위해 immer 사용(알아서 불변성을 유지해줌)","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/reducers/post.js"],"names":["shortid","produce","faker","initialState","mainPosts","imagePaths","hasMorePost","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","concat","length","error","unshift","filter","v","post","find","PostId","addcommentd"],"mappings":"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","sourcesContent":["import shortid from \"shortid\";\r\nimport produce from \"immer\";\r\nimport faker from 'faker';\r\n\r\nexport const initialState = {\r\n    mainPosts : [],\r\n    imagePaths : [],\r\n    hasMorePost : true,\r\n    loadPostsLoading : false,\r\n    loadPostsDone : false,\r\n    loadPostsError : null,\r\n    addPostLoading : false,\r\n    addPostDone : false,\r\n    addPostError : null,\r\n    addCommentLoading : false,\r\n    addCommentDone : false,\r\n    addCommentError : null,\r\n    removePostLoading : false,\r\n    removePostDone : false,\r\n    removePostError : null,\r\n}\r\n\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() =>({\r\n    id : shortid.generate(),\r\n    User : {\r\n        id : shortid.generate(),\r\n        nickname : faker.name.findName()\r\n    },\r\n    content : faker.lorem.paragraph(),\r\n    Images : [{\r\n        src : faker.image.image(),\r\n    }],\r\n    Comments : [{\r\n        User : {\r\n            id : shortid.generate(),\r\n            nickname : faker.name.findName()\r\n        },\r\n        content : faker.lorem.sentence(),\r\n    }],\r\n}))\r\n\r\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\r\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\r\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const addPost = (data) =>({\r\n    type : ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) =>({\r\n    type : ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case LOAD_POSTS_REQUEST : \r\n                draft.loadPostsLoading = true;\r\n                draft.loadPostsDone = false;\r\n                draft.loadPostsError = null;\r\n                break;\r\n            case LOAD_POSTS_SUCCESS :\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsDone = true;\r\n                draft.mainPosts = action.data.concat(draft.mainPosts);\r\n                draft.hasMorePost = draft.mainPosts.length < 50;\r\n                break;\r\n            case LOAD_POSTS_FAILURE : \r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsError = action.error;\r\n                break;\r\n            case ADD_POST_REQUEST : \r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS :\r\n                draft.addPostLoading = false;\r\n                draft.mainPosts.unshift(action.data); // dummyPost를 앞에 추가해야지 게시글이 위로 쌓임;\r\n                draft.addPostDone = true;\r\n                break;\r\n            case ADD_POST_FAILURE : \r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n            case REMOVE_POST_REQUEST : \r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS :\r\n                draft.removePostLoading = false;\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                draft.removePostDone = true;\r\n                break;\r\n            case REMOVE_POST_FAILURE : \r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n            case ADD_COMMENT_REQUEST : \r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS : {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Comments.unshift(action.data);\r\n                draft.addCommentLoading = false;\r\n                draft.addcommentd = true;\r\n                break;\r\n                // 불변성을 지키기 위해 아래와 같이 작성했던 코드를 immer를 사용하면 위의 코드로 정리 가능\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = {...state.mainPosts[postIndex]};\r\n                // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post;\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts,\r\n                //     addCommentLoading : false,\r\n                //     addCommentDone : true,\r\n                // };\r\n            }\r\n            case ADD_COMMENT_FAILURE : \r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n            default :\r\n                break;\r\n        }\r\n});\r\n    \r\n\r\n\r\nexport default reducer;\r\n\r\n// 불변성을 위해 immer 사용(알아서 불변성을 유지해줌)"]},"metadata":{},"sourceType":"module"}