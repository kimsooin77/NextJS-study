{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, delay, takeLatest, put } from 'redux-saga/effects';\nimport shortid from 'shortid';\nimport { ADD_POST_REQUEST, ADD_COMMENT_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/post', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data) \n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.reponse.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data) \n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.reponse.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data) \n    yield delay(1000); // post 리듀서 조작\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    }); // user 리듀서 조작\n\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.reponse.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.reponse.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPost), fork(watchRemovePost), fork(watchAddComment)]);\n} // post saga에서 action 리듀서 호출","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/sagas/post.js"],"names":["axios","all","fork","delay","takeLatest","put","shortid","ADD_POST_REQUEST","ADD_COMMENT_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","id","generate","type","err","reponse","addPostAPI","post","addPost","content","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchAddPost","watchLoadPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,KAAnB,EAA0BC,UAA1B,EAAsCC,GAAtC,QAAgD,oBAAhD;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SACIC,gBADJ,EACsBC,mBADtB,EAEIC,gBAFJ,EAEsBC,mBAFtB,EAGIC,gBAHJ,EAGsBC,mBAHtB,EAIIC,mBAJJ,EAIyBC,mBAJzB,EAKIC,mBALJ,EAK0BC,kBAL1B,EAMIC,kBANJ,EAMwBC,kBANxB,EAM4CC,iBAN5C,QAOO,kBAPP;AAQA,SAASC,cAAT,EAA0BC,iBAA1B,QAAmD,kBAAnD;;AAGA,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AACxB,SAAOvB,KAAK,CAACwB,GAAN,CAAU,WAAV,EAAuBD,IAAvB,CAAP;AACH;;AAED,UAAUE,SAAV,CAAoBC,MAApB,EAA4B;AACxB,MAAI;AACA;AACA,UAAMvB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMwB,EAAE,GAAGrB,OAAO,CAACsB,QAAR,EAAX;AACA,UAAMvB,GAAG,CAAC;AACNwB,MAAAA,IAAI,EAAGZ,kBADD;AAENM,MAAAA,IAAI,EAAGJ,iBAAiB,CAAC,EAAD;AAFlB,KAAD,CAAT;AAIH,GARD,CAQE,OAAMW,GAAN,EAAW;AACT,UAAMzB,GAAG,CAAC;AACNwB,MAAAA,IAAI,EAAGX,kBADD;AAENK,MAAAA,IAAI,EAAGO,GAAG,CAACC,OAAJ,CAAYR;AAFb,KAAD,CAAT;AAIH;AACJ;;AACD,SAASS,UAAT,CAAoBT,IAApB,EAA0B;AACtB,SAAOvB,KAAK,CAACiC,IAAN,CAAW,WAAX,EAAwBV,IAAxB,CAAP;AACH;;AAED,UAAUW,OAAV,CAAkBR,MAAlB,EAA0B;AACtB,MAAI;AACA;AACA,UAAMvB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMwB,EAAE,GAAGrB,OAAO,CAACsB,QAAR,EAAX;AACA,UAAMvB,GAAG,CAAC;AACNwB,MAAAA,IAAI,EAAGpB,gBADD;AAENc,MAAAA,IAAI,EAAG;AACHI,QAAAA,EADG;AAEHQ,QAAAA,OAAO,EAAGT,MAAM,CAACH;AAFd;AAFD,KAAD,CAAT;AAOA,UAAMlB,GAAG,CAAC;AACNwB,MAAAA,IAAI,EAAGT,cADD;AAENG,MAAAA,IAAI,EAAGI;AAFD,KAAD,CAAT;AAIH,GAfD,CAeE,OAAMG,GAAN,EAAW;AACT,UAAMzB,GAAG,CAAC;AACNwB,MAAAA,IAAI,EAAGlB,gBADD;AAENY,MAAAA,IAAI,EAAGO,GAAG,CAACC,OAAJ,CAAYR;AAFb,KAAD,CAAT;AAIH;AACJ;;AACD,SAASa,aAAT,CAAuBb,IAAvB,EAA6B;AACzB,SAAOvB,KAAK,CAACqC,MAAN,CAAa,WAAb,EAA0Bd,IAA1B,CAAP;AACH;;AAED,UAAUe,UAAV,CAAqBZ,MAArB,EAA6B;AACzB,MAAI;AACA;AACA,UAAMvB,KAAK,CAAC,IAAD,CAAX,CAFA,CAGA;;AACA,UAAME,GAAG,CAAC;AACNwB,MAAAA,IAAI,EAAGf,mBADD;AAENS,MAAAA,IAAI,EAAGG,MAAM,CAACH;AAFR,KAAD,CAAT,CAJA,CAQA;;AACA,UAAMlB,GAAG,CAAC;AACNwB,MAAAA,IAAI,EAAGR,iBADD;AAENE,MAAAA,IAAI,EAAGG,MAAM,CAACH;AAFR,KAAD,CAAT;AAIH,GAbD,CAaE,OAAMO,GAAN,EAAW;AACT,UAAMzB,GAAG,CAAC;AACNwB,MAAAA,IAAI,EAAGd,mBADD;AAENQ,MAAAA,IAAI,EAAGO,GAAG,CAACC,OAAJ,CAAYR;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASgB,aAAT,CAAuBhB,IAAvB,EAA6B;AACzB,SAAOvB,KAAK,CAACiC,IAAN,CAAY,aAAYV,IAAI,CAACiB,MAAO,UAApC,EAA+CjB,IAA/C,CAAP;AACH;;AAED,UAAUkB,UAAV,CAAqBf,MAArB,EAA6B;AACzB,MAAI;AACA,UAAMvB,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNwB,MAAAA,IAAI,EAAGnB,mBADD;AAENa,MAAAA,IAAI,EAAGG,MAAM,CAACH;AAFR,KAAD,CAAT;AAIH,GAND,CAME,OAAMO,GAAN,EAAW;AACT,UAAMzB,GAAG,CAAC;AACNwB,MAAAA,IAAI,EAAGjB,mBADD;AAENW,MAAAA,IAAI,EAAGO,GAAG,CAACC,OAAJ,CAAYR;AAFb,KAAD,CAAT;AAIH;AACJ;;AAGD,UAAUmB,YAAV,GAAyB;AACrB,QAAMtC,UAAU,CAACG,gBAAD,EAAmB2B,OAAnB,CAAhB;AACH;;AAED,UAAUS,aAAV,GAA0B;AACtB,QAAMvC,UAAU,CAACY,kBAAD,EAAqBS,SAArB,CAAhB;AACH;;AAED,UAAUmB,eAAV,GAA4B;AACxB,QAAMxC,UAAU,CAACS,mBAAD,EAAsByB,UAAtB,CAAhB;AACH;;AAED,UAAUO,eAAV,GAA4B;AACxB,QAAMzC,UAAU,CAACI,mBAAD,EAAsBiC,UAAtB,CAAhB;AACH;;AAED,eAAe,UAAUK,QAAV,GAAqB;AAChC,QAAM7C,GAAG,CAAC,CACNC,IAAI,CAACwC,YAAD,CADE,EAENxC,IAAI,CAACyC,aAAD,CAFE,EAGNzC,IAAI,CAAC0C,eAAD,CAHE,EAIN1C,IAAI,CAAC2C,eAAD,CAJE,CAAD,CAAT;AAMH,C,CAGD","sourcesContent":["import axios from 'axios';\r\nimport {all, fork, delay, takeLatest, put} from 'redux-saga/effects';\r\nimport shortid from 'shortid';\r\nimport { \r\n    ADD_POST_REQUEST, ADD_COMMENT_REQUEST, \r\n    ADD_POST_SUCCESS, ADD_COMMENT_SUCCESS, \r\n    ADD_POST_FAILURE, ADD_COMMENT_FAILURE, \r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, \r\n    REMOVE_POST_FAILURE , LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME , REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\nfunction loadPostsAPI(data) {\r\n    return axios.get('/api/post', data) \r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data) \r\n        yield delay(1000);\r\n        const id = shortid.generate();\r\n        yield put({\r\n            type : LOAD_POSTS_SUCCESS,\r\n            data : generateDummyPost(10),\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : LOAD_POSTS_FAILURE,\r\n            data : err.reponse.data \r\n        })\r\n    }\r\n}\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data) \r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data) \r\n        yield delay(1000);\r\n        const id = shortid.generate();\r\n        yield put({\r\n            type : ADD_POST_SUCCESS,\r\n            data : {\r\n                id,\r\n                content : action.data,\r\n            },\r\n        });\r\n        yield put({\r\n            type : ADD_POST_TO_ME,\r\n            data : id,\r\n        })\r\n    } catch(err) {\r\n        yield put({\r\n            type : ADD_POST_FAILURE,\r\n            data : err.reponse.data \r\n        })\r\n    }\r\n}\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api/post', data) \r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data) \r\n        yield delay(1000);\r\n        // post 리듀서 조작\r\n        yield put({\r\n            type : REMOVE_POST_SUCCESS,\r\n            data : action.data,\r\n        });\r\n        // user 리듀서 조작\r\n        yield put({\r\n            type : REMOVE_POST_OF_ME,\r\n            data : action.data,\r\n        })\r\n    } catch(err) {\r\n        yield put({\r\n            type : REMOVE_POST_FAILURE,\r\n            data : err.reponse.data \r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.postId}/comment`, data); \r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        yield delay(1000);\r\n        yield put({\r\n            type : ADD_COMMENT_SUCCESS,\r\n            data : action.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : ADD_COMMENT_FAILURE,\r\n            data : err.reponse.data \r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}\r\n\r\n\r\n// post saga에서 action 리듀서 호출"]},"metadata":{},"sourceType":"module"}