{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, put, takeLatest, delay, call } from 'redux-saga/effects';\nimport { LOG_IN_SUCCESS, LOG_OUT_SUCCESS, SIGN_UP_SUCCESS, LOG_IN_REQUEST, LOG_OUT_REQUEST, SIGN_UP_REQUEST, LOG_IN_FAILURE, LOG_OUT_FAILURE, SIGN_UP_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_MY_INFO_FAILURE, CHANGE_NICKNAME_REQUEST, CHANGE_NICKNAME_SUCCESS, CHANGE_NICKNAME_FAILURE } from '../reducers/user';\n\nfunction changeNicknameAPI(data) {\n  return axios.patch('/user/nickname', {\n    nickname: data\n  });\n}\n\nfunction* changeNickname(action) {\n  try {\n    const result = yield call(changeNicknameAPI, action.data);\n    yield put({\n      type: CHANGE_NICKNAME_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: CHANGE_NICKNAME_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadMyInfoAPI() {\n  return axios.get('/user');\n}\n\nfunction* loadMyInfo(action) {\n  try {\n    const result = yield call(loadMyInfoAPI, action.data);\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_MY_INFO_FAILURE,\n      error: err.reponse.data\n    });\n  }\n}\n\nfunction followAPI(data) {\n  return axios.patch(`/user/${data}/follow`);\n}\n\nfunction* follow(action) {\n  try {\n    const result = yield call(followAPI, action.data);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.reponse.data\n    });\n  }\n}\n\nfunction unfollowAPI(data) {\n  return axios.delete(`/user/${data}/follow`, data); // 로그인 요청 보냄\n}\n\nfunction* unfollow(action) {\n  try {\n    const result = yield call(unfollowAPI, action.data);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.reponse.data\n    });\n  }\n}\n\nfunction logInAPI(data) {\n  return axios.post('/user/login', data); // 로그인 요청 보냄\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data); // 로그인 요청에 대한 결과값을 받아서 변수에 저장\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data // 로그인 성공시 결과값 안에 들어있는 data\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data // 로그인 실패시 결과값 안에 들어있는 data\n\n    });\n  }\n}\n\nfunction logOutAPI(data) {\n  return axios.post('/user/logout', data);\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post('/user', data); // daata는 email,password,nickname이 들어있는 객체이다.\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchChnageNickname() {\n  yield takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname);\n}\n\nfunction* watchLoadMyInfo() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchChnageNickname), fork(watchLoadMyInfo), fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/sagas/user.js"],"names":["axios","all","fork","put","takeLatest","delay","call","LOG_IN_SUCCESS","LOG_OUT_SUCCESS","SIGN_UP_SUCCESS","LOG_IN_REQUEST","LOG_OUT_REQUEST","SIGN_UP_REQUEST","LOG_IN_FAILURE","LOG_OUT_FAILURE","SIGN_UP_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_SUCCESS","LOAD_MY_INFO_FAILURE","CHANGE_NICKNAME_REQUEST","CHANGE_NICKNAME_SUCCESS","CHANGE_NICKNAME_FAILURE","changeNicknameAPI","data","patch","nickname","changeNickname","action","result","type","err","error","response","loadMyInfoAPI","get","loadMyInfo","reponse","followAPI","follow","unfollowAPI","delete","unfollow","logInAPI","post","logIn","console","logOutAPI","logOut","signUpAPI","signUp","log","watchChnageNickname","watchLoadMyInfo","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {all, fork, put, takeLatest, delay, call} from 'redux-saga/effects';\r\nimport { \r\n    LOG_IN_SUCCESS, LOG_OUT_SUCCESS, SIGN_UP_SUCCESS,\r\n    LOG_IN_REQUEST, LOG_OUT_REQUEST, SIGN_UP_REQUEST,\r\n    LOG_IN_FAILURE, LOG_OUT_FAILURE, SIGN_UP_FAILURE,\r\n    FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE,\r\n    UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE,\r\n    LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_MY_INFO_FAILURE, CHANGE_NICKNAME_REQUEST, CHANGE_NICKNAME_SUCCESS, CHANGE_NICKNAME_FAILURE\r\n} from '../reducers/user';\r\n\r\n\r\nfunction changeNicknameAPI(data) {\r\n    return axios.patch('/user/nickname', {nickname : data})\r\n}\r\n\r\nfunction* changeNickname(action) {\r\n    try {\r\n        const result = yield call(changeNicknameAPI, action.data);\r\n        yield put({\r\n            type : CHANGE_NICKNAME_SUCCESS,\r\n            data : result.data\r\n        })\r\n    }catch(err) {\r\n        yield put({\r\n            type : CHANGE_NICKNAME_FAILURE,\r\n            error : err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction loadMyInfoAPI() {\r\n    return axios.get('/user');\r\n}\r\n\r\nfunction* loadMyInfo(action) {\r\n    try {\r\n        const result = yield call(loadMyInfoAPI, action.data)\r\n        yield put({\r\n            type : LOAD_MY_INFO_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : LOAD_MY_INFO_FAILURE,\r\n            error : err.reponse.data, \r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction followAPI(data) {\r\n    return axios.patch(`/user/${data}/follow`); \r\n}\r\n\r\nfunction* follow(action) {\r\n    try {\r\n        const result = yield call(followAPI, action.data);\r\n        yield put({\r\n            type : FOLLOW_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : FOLLOW_FAILURE,\r\n            error : err.reponse.data, \r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction unfollowAPI(data) {\r\n    return axios.delete(`/user/${data}/follow`, data); // 로그인 요청 보냄\r\n}\r\n\r\n\r\nfunction* unfollow(action) {\r\n    try {\r\n        const result = yield call(unfollowAPI, action.data);\r\n        yield put({\r\n            type : UNFOLLOW_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : UNFOLLOW_FAILURE,\r\n            error : err.reponse.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/user/login', data); // 로그인 요청 보냄\r\n}\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        const result = yield call(logInAPI, action.data); // 로그인 요청에 대한 결과값을 받아서 변수에 저장\r\n        \r\n        yield put({\r\n            type : LOG_IN_SUCCESS,\r\n            data : result.data, // 로그인 성공시 결과값 안에 들어있는 data\r\n        });\r\n    } catch(err) {\r\n        console.error(err);\r\n        yield put({\r\n            type : LOG_IN_FAILURE,\r\n            error : err.response.data, // 로그인 실패시 결과값 안에 들어있는 data\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction logOutAPI(data) {\r\n    return axios.post('/user/logout', data)\r\n}\r\n\r\n\r\nfunction* logOut() {\r\n    try{\r\n        yield call(logOutAPI);\r\n        yield put({\r\n            type : LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type : LOG_OUT_FAILURE,\r\n            error : err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n    return axios.post('/user', data) // daata는 email,password,nickname이 들어있는 객체이다.\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try{\r\n        const result = yield call(signUpAPI, action.data);\r\n        console.log(result);\r\n        yield put({\r\n            type : SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type : SIGN_UP_FAILURE,\r\n            error : err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchChnageNickname() {\r\n    yield takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname);\r\n}\r\n\r\nfunction* watchLoadMyInfo() {\r\n    yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\r\n}\r\n\r\nfunction* watchFollow() {\r\n    yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\n\r\nfunction* watchUnfollow() {\r\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n\r\nfunction* watchLogIn() {\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchChnageNickname),\r\n        fork(watchLoadMyInfo),\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}