{"ast":null,"code":"import produce from \"immer\";\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport var UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport var UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport var UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\nexport var LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport var LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport var LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\nexport var UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport var UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport var UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\nexport var LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport var LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport var LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport var LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\nexport var LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\nexport var LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport var REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport var REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport var REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport var RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport var RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport var RETWEET_FAILURE = \"REMOVE_POST_FAILURE\";\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter(function (v, i) {\n          return i !== action.data;\n        });\n        break;\n\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n\n      case RETWEET_SUCCESS:\n        {\n          draft.retweetLoading = false;\n          draft.retweetDone = true;\n          draft.mainPosts.unshift(action.data);\n          break;\n        }\n\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        break;\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          draft.imagePaths = draft.imagePaths.concat(action.data); // routes/post에서 res.json으로 받아온 이미지 주소\n\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesDone = true;\n          break;\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          }); // 메인포스트 중에서 전달받은 액션데이터의 포스트아이가 같은 걸 찾아서\n\n          post.Likers.push({\n            id: action.data.UserId\n          }); // 포스트 Likers에 좋아요를 누른 사람(사용자아이디)의 아이디를 넣는다.\n\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post.Likers = _post.Likers.filter(function (v) {\n            return v.id !== action.data.UserId;\n          });\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.hasMorePost = action.data.length === 10;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.singlePost = action.data;\n        draft.hasMorePost = action.data.length === 10;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.mainPosts.unshift(action.data); // dummyPost를 앞에 추가해야지 게시글이 위로 쌓임;\n\n        draft.addPostDone = true;\n        draft.imagePaths = [];\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostDone = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data.postId;\n        });\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostDone = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post2.Comments.unshift(action.data);\n\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // 불변성을 지키기 위해 아래와 같이 작성했던 코드를 immer를 사용하면 위의 코드로 정리 가능\n          // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = {...state.mainPosts[postIndex]};\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //     ...state,\n          //     mainPosts,\n          //     addCommentLoading : false,\n          //     addCommentDone : true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentDone = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer; // 불변성을 위해 immer 사용(알아서 불변성을 유지해줌)","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePost","loadPostsLoading","loadPostsDone","loadPostsError","loadPostLoading","loadPostDone","loadPostError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","REMOVE_IMAGE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","filter","v","i","unshift","error","concat","post","find","id","PostId","Likers","push","UserId","length","singlePost","postId","Comments"],"mappings":"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","sourcesContent":["import produce from \"immer\";\r\n\r\nexport const initialState = {\r\n    mainPosts : [],\r\n    imagePaths : [],\r\n    hasMorePost : true,\r\n    loadPostsLoading : false,\r\n    loadPostsDone : false,\r\n    loadPostsError : null,\r\n    loadPostLoading : false,\r\n    loadPostDone : false,\r\n    loadPostError : null,\r\n    likePostLoading : false,\r\n    likePostDone : false,\r\n    likePostError : null,\r\n    unlikePostLoading : false,\r\n    unlikePostDone : false,\r\n    unlikePostError : null,\r\n    addPostLoading : false,\r\n    addPostDone : false,\r\n    addPostError : null,\r\n    addCommentLoading : false,\r\n    addCommentDone : false,\r\n    addCommentError : null,\r\n    removePostLoading : false,\r\n    removePostDone : false,\r\n    removePostError : null,\r\n    uploadImagesLoading : false,\r\n    uploadImagesDone : false,\r\n    uploadImagesError : null,\r\n    retweetLoading : false,\r\n    retweetDone : false,\r\n    retweetError : null,\r\n}\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\r\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\r\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\r\n\r\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\r\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\r\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\r\n\r\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\r\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\r\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\r\n\r\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\r\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\r\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\r\n\r\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\r\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\r\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\r\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\r\nexport const RETWEET_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const addPost = (data) =>({\r\n    type : ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) =>({\r\n    type : ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case REMOVE_IMAGE :\r\n                draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n                break;\r\n            case RETWEET_REQUEST : \r\n                draft.retweetLoading = true;\r\n                draft.retweetDone = false;\r\n                draft.retweetError = null;\r\n                break;\r\n            case RETWEET_SUCCESS : {\r\n                draft.retweetLoading = false;\r\n                draft.retweetDone = true;\r\n                draft.mainPosts.unshift(action.data);\r\n                break;\r\n            }\r\n            case RETWEET_FAILURE : \r\n                draft.retweetLoading = false;\r\n                draft.retweetError = action.error;\r\n                break;\r\n            case UPLOAD_IMAGES_REQUEST : \r\n                draft.uploadImagesLoading = true;\r\n                draft.uploadImagesDone = false;\r\n                draft.uploadImagesError = null;\r\n                break;\r\n            case UPLOAD_IMAGES_SUCCESS : {\r\n                draft.imagePaths = draft.imagePaths.concat(action.data); // routes/post에서 res.json으로 받아온 이미지 주소\r\n                draft.uploadImagesLoading = false;\r\n                draft.uploadImagesDone = true;\r\n                break;\r\n            }\r\n            case UPLOAD_IMAGES_FAILURE : \r\n                draft.uploadImagesLoading = false;\r\n                draft.uploadImagesError = action.error;\r\n                break;\r\n            case LIKE_POST_REQUEST : \r\n                draft.likePostLoading = true;\r\n                draft.likePostDone = false;\r\n                draft.likePostError = null;\r\n                break;\r\n            case LIKE_POST_SUCCESS : {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId); // 메인포스트 중에서 전달받은 액션데이터의 포스트아이가 같은 걸 찾아서\r\n                post.Likers.push({id : action.data.UserId}); // 포스트 Likers에 좋아요를 누른 사람(사용자아이디)의 아이디를 넣는다.\r\n                draft.likePostLoading = false;\r\n                draft.likePostDone = true;\r\n                break;\r\n            }\r\n            case LIKE_POST_FAILURE : \r\n                draft.likePostLoading = false;\r\n                draft.likePostError = action.error;\r\n                break;\r\n            case UNLIKE_POST_REQUEST : \r\n                draft.unlikePostLoading = true;\r\n                draft.unlikePostDone = false;\r\n                draft.unlikePostError = null;\r\n                break;\r\n            case UNLIKE_POST_SUCCESS : {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n                draft.unlikePostLoading = false;\r\n                draft.unlikePostDone = true;\r\n                break;\r\n            }\r\n            case UNLIKE_POST_FAILURE : \r\n                draft.unlikePostLoading = false;\r\n                draft.unlikePostError = action.error;\r\n                break;\r\n            case LOAD_POSTS_REQUEST : \r\n                draft.loadPostsLoading = true;\r\n                draft.loadPostsDone = false;\r\n                draft.loadPostsError = null;\r\n                break;\r\n            case LOAD_POSTS_SUCCESS :\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsDone = true;\r\n                draft.mainPosts = draft.mainPosts.concat(action.data);\r\n                draft.hasMorePost = action.data.length === 10;\r\n                break;\r\n            case LOAD_POSTS_FAILURE : \r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsError = action.error;\r\n                break;\r\n            case LOAD_POST_REQUEST : \r\n                draft.loadPostLoading = true;\r\n                draft.loadPostDone = false;\r\n                draft.loadPostError = null;\r\n                break;\r\n            case LOAD_POST_SUCCESS :\r\n                draft.loadPostLoading = false;\r\n                draft.loadPostDone = true;\r\n                draft.singlePost = action.data;\r\n                draft.hasMorePost = action.data.length === 10;\r\n                break;\r\n            case LOAD_POST_FAILURE : \r\n                draft.loadPostLoading = false;\r\n                draft.loadPostError = action.error;\r\n                break;\r\n            case ADD_POST_REQUEST : \r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS :\r\n                draft.addPostLoading = false;\r\n                draft.mainPosts.unshift(action.data); // dummyPost를 앞에 추가해야지 게시글이 위로 쌓임;\r\n                draft.addPostDone = true;\r\n                draft.imagePaths = [];\r\n                break;\r\n            case ADD_POST_FAILURE : \r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n            case REMOVE_POST_REQUEST : \r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS :\r\n                draft.removePostLoading = false;\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.postId);\r\n                draft.removePostDone = true;\r\n                break;\r\n            case REMOVE_POST_FAILURE : \r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n            case ADD_COMMENT_REQUEST : \r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS : {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Comments.unshift(action.data);\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n                // 불변성을 지키기 위해 아래와 같이 작성했던 코드를 immer를 사용하면 위의 코드로 정리 가능\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = {...state.mainPosts[postIndex]};\r\n                // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post;\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts,\r\n                //     addCommentLoading : false,\r\n                //     addCommentDone : true,\r\n                // };\r\n            }\r\n            case ADD_COMMENT_FAILURE : \r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n            default :\r\n                break;\r\n        }\r\n});\r\n    \r\n\r\n\r\nexport default reducer;\r\n\r\n// 불변성을 위해 immer 사용(알아서 불변성을 유지해줌)"]},"metadata":{},"sourceType":"module"}