{"ast":null,"code":"import shortid from \"shortid\";\nimport produce from \"immer\";\nimport faker from 'faker';\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"sooinkim\"\n    },\n    content: \"첫 번째 게시글 #next.js #coding\",\n    Images: [{\n      id: shortid.generate(),\n      src: 'https://i.pinimg.com/564x/09/43/f1/0943f1f3a3badf9b03b19e01f84e6810.jpg'\n    }, {\n      src: 'https://i.pinimg.com/236x/08/fb/db/08fbdbb51fdf1148ce6a67d2fe6c22f2.jpg'\n    }, {\n      src: 'https://i.pinimg.com/236x/00/8e/35/008e3564d0892d94a5e34a980b25ef9b.jpg'\n    }],\n    Comments: [{\n      id: shortid.generate(),\n      User: {\n        id: shortid.generate(),\n        nickname: \"fashion\"\n      },\n      content: \"첫번째 룩이 가장 마음에 들어요!\"\n    }, {\n      User: {\n        id: shortid.generate(),\n        nickname: \"strawberry\"\n      },\n      content: \"색감이 예쁘네요~\"\n    }]\n  }],\n  imagePaths: [],\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortid.generate(),\n      User: {\n        id: shortid.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.imageUrl()\n      }],\n      Comments: [{\n        User: {\n          id: shortid.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n};\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\nexport var LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport var LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport var LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport var REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport var REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport var REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: \"kimsooin\"\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: \"kimsooin\"\n    }\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.mainPosts.unshift(dummyPost(action.data)); // dummyPost를 앞에 추가해야지 게시글이 위로 쌓임;\n\n        draft.addPostDone = true;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostDone = false;\n        draft.addPostError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.addPostLoading = false;\n        draft.mainPosts.unshift(dummyPost(action.data)); // dummyPost를 앞에 추가해야지 게시글이 위로 쌓임;\n\n        draft.addPostDone = true;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostDone = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostDone = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addcommentd = true;\n          break; // 불변성을 지키기 위해 아래와 같이 작성했던 코드를 immer를 사용하면 위의 코드로 정리 가능\n          // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = {...state.mainPosts[postIndex]};\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //     ...state,\n          //     mainPosts,\n          //     addCommentLoading : false,\n          //     addCommentDone : true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentDone = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer; // 불변성을 위해 immer 사용(알아서 불변성을 유지해줌)","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/reducers/post.js"],"names":["shortid","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","generateDummyPost","number","Array","fill","map","name","findName","lorem","paragraph","image","imageUrl","sentence","concat","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","v","post","find","postId","addcommentd"],"mappings":"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","sourcesContent":["import shortid from \"shortid\";\r\nimport produce from \"immer\";\r\nimport faker from 'faker';\r\n\r\nexport const initialState = {\r\n    mainPosts : [{\r\n        id : 1,\r\n        User : {\r\n            id : 1,\r\n            nickname : \"sooinkim\",\r\n        },\r\n        content : \"첫 번째 게시글 #next.js #coding\",\r\n        Images : [{\r\n            id : shortid.generate(),\r\n            src : 'https://i.pinimg.com/564x/09/43/f1/0943f1f3a3badf9b03b19e01f84e6810.jpg'\r\n        }, {\r\n            src : 'https://i.pinimg.com/236x/08/fb/db/08fbdbb51fdf1148ce6a67d2fe6c22f2.jpg'\r\n        }, {\r\n            src : 'https://i.pinimg.com/236x/00/8e/35/008e3564d0892d94a5e34a980b25ef9b.jpg'\r\n        }],\r\n        Comments : [ {\r\n            id : shortid.generate(),\r\n            User : {\r\n                id : shortid.generate(),\r\n                nickname : \"fashion\",\r\n            },\r\n            content : \"첫번째 룩이 가장 마음에 들어요!\"\r\n        }, {\r\n            User : {\r\n                id : shortid.generate(),\r\n                nickname : \"strawberry\"\r\n            },\r\n            content : \"색감이 예쁘네요~\"\r\n        }]\r\n    }],\r\n    imagePaths : [],\r\n    loadPostsLoading : false,\r\n    loadPostsDone : false,\r\n    loadPostsError : null,\r\n    addPostLoading : false,\r\n    addPostDone : false,\r\n    addPostError : null,\r\n    addCommentLoading : false,\r\n    addCommentDone : false,\r\n    addCommentError : null,\r\n    removePostLoading : false,\r\n    removePostDone : false,\r\n    removePostError : null,\r\n}\r\n\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() =>({\r\n    id : shortid.generate(),\r\n    User : {\r\n        id : shortid.generate(),\r\n        nickname : faker.name.findName()\r\n    },\r\n    content : faker.lorem.paragraph(),\r\n    Images : [{\r\n        src : faker.image.imageUrl(),\r\n    }],\r\n    Comments : [{\r\n        User : {\r\n            id : shortid.generate(),\r\n            nickname : faker.name.findName()\r\n        },\r\n        content : faker.lorem.sentence(),\r\n    }],\r\n}))\r\n\r\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\r\n\r\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\r\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\r\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const addPost = (data) =>({\r\n    type : ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) =>({\r\n    type : ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\nconst dummyPost = (data) => ( {\r\n    id : data.id,\r\n    content : data.content,\r\n    User : {\r\n        id : 1,\r\n        nickname : \"kimsooin\"\r\n    },\r\n    Images : [],\r\n    Comments : [],\r\n});\r\n\r\nconst dummyComment = (data) => ( {\r\n    id : data.id,\r\n    content : data.content,\r\n    User : {\r\n        id : 1,\r\n        nickname : \"kimsooin\"\r\n    },\r\n});\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case ADD_POST_REQUEST : \r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS :\r\n                draft.addPostLoading = false;\r\n                draft.mainPosts.unshift(dummyPost(action.data)); // dummyPost를 앞에 추가해야지 게시글이 위로 쌓임;\r\n                draft.addPostDone = true;\r\n                break;\r\n            case ADD_POST_FAILURE : \r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n            case LOAD_POSTS_REQUEST : \r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n            case LOAD_POSTS_SUCCESS :\r\n                draft.addPostLoading = false;\r\n                draft.mainPosts.unshift(dummyPost(action.data)); // dummyPost를 앞에 추가해야지 게시글이 위로 쌓임;\r\n                draft.addPostDone = true;\r\n                break;\r\n            case LOAD_POSTS_FAILURE : \r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n            case REMOVE_POST_REQUEST : \r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS :\r\n                draft.removePostLoading = false;\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                draft.removePostDone = true;\r\n                break;\r\n            case REMOVE_POST_FAILURE : \r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n            case ADD_COMMENT_REQUEST : \r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS : {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                draft.addCommentLoading = false;\r\n                draft.addcommentd = true;\r\n                break;\r\n                // 불변성을 지키기 위해 아래와 같이 작성했던 코드를 immer를 사용하면 위의 코드로 정리 가능\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = {...state.mainPosts[postIndex]};\r\n                // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post;\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts,\r\n                //     addCommentLoading : false,\r\n                //     addCommentDone : true,\r\n                // };\r\n            }\r\n            case ADD_COMMENT_FAILURE : \r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n            default :\r\n                break;\r\n        }\r\n    });\r\n    \r\n   \r\n}\r\n\r\nexport default reducer;\r\n\r\n// 불변성을 위해 immer 사용(알아서 불변성을 유지해줌)"]},"metadata":{},"sourceType":"module"}