{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, delay, takeLatest, put } from 'redux-saga/effects';\nimport shortid from 'shortid';\nimport { ADD_POST_REQUEST, ADD_COMMENT_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data) \n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.reponse.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.reponse.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n} // post saga에서 action 리듀서 호출","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/sagas/post.js"],"names":["axios","all","fork","delay","takeLatest","put","shortid","ADD_POST_REQUEST","ADD_COMMENT_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","addPostAPI","data","post","addPost","action","id","generate","type","content","err","reponse","addCommentAPI","postId","addComment","watchAddPost","watchAddComment","postSaga","watchRemovePost"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,KAAnB,EAA0BC,UAA1B,EAAsCC,GAAtC,QAAgD,oBAAhD;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,EAAgDC,gBAAhD,EAAkEC,mBAAlE,EAAuFC,gBAAvF,EAAyGC,mBAAzG,QAAoI,kBAApI;AACA,SAASC,cAAT,QAA+B,kBAA/B;;AAGA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOf,KAAK,CAACgB,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AACtB,MAAI;AACA;AACA,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAMgB,EAAE,GAAGb,OAAO,CAACc,QAAR,EAAX;AACA,UAAMf,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAAGZ,gBADD;AAENM,MAAAA,IAAI,EAAG;AACHI,QAAAA,EADG;AAEHG,QAAAA,OAAO,EAAGJ,MAAM,CAACH;AAFd;AAFD,KAAD,CAAT;AAOA,UAAMV,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAAGR,cADD;AAENE,MAAAA,IAAI,EAAGI;AAFD,KAAD,CAAT;AAIH,GAfD,CAeE,OAAMI,GAAN,EAAW;AACT,UAAMlB,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAAGV,gBADD;AAENI,MAAAA,IAAI,EAAGQ,GAAG,CAACC,OAAJ,CAAYT;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASU,aAAT,CAAuBV,IAAvB,EAA6B;AACzB,SAAOf,KAAK,CAACgB,IAAN,CAAY,aAAYD,IAAI,CAACW,MAAO,UAApC,EAA+CX,IAA/C,CAAP;AACH;;AAED,UAAUY,UAAV,CAAqBT,MAArB,EAA6B;AACzB,MAAI;AACA,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAAGX,mBADD;AAENK,MAAAA,IAAI,EAAGG,MAAM,CAACH;AAFR,KAAD,CAAT;AAIH,GAND,CAME,OAAMQ,GAAN,EAAW;AACT,UAAMlB,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAAGT,mBADD;AAENG,MAAAA,IAAI,EAAGQ,GAAG,CAACC,OAAJ,CAAYT;AAFb,KAAD,CAAT;AAIH;AACJ;;AAGD,UAAUa,YAAV,GAAyB;AACrB,QAAMxB,UAAU,CAACG,gBAAD,EAAmBU,OAAnB,CAAhB;AACH;;AAED,UAAUY,eAAV,GAA4B;AACxB,QAAMzB,UAAU,CAACI,mBAAD,EAAsBmB,UAAtB,CAAhB;AACH;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAM7B,GAAG,CAAC,CACNC,IAAI,CAAC0B,YAAD,CADE,EAEN1B,IAAI,CAAC6B,eAAD,CAFE,EAGN7B,IAAI,CAAC2B,eAAD,CAHE,CAAD,CAAT;AAKH,C,CAGD","sourcesContent":["import axios from 'axios';\r\nimport {all, fork, delay, takeLatest, put} from 'redux-saga/effects';\r\nimport shortid from 'shortid';\r\nimport { ADD_POST_REQUEST, ADD_COMMENT_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_FAILURE } from '../reducers/post';\r\nimport { ADD_POST_TO_ME } from '../reducers/user';\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data) \r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data) \r\n        yield delay(1000);\r\n        const id = shortid.generate();\r\n        yield put({\r\n            type : ADD_POST_SUCCESS,\r\n            data : {\r\n                id,\r\n                content : action.data,\r\n            },\r\n        });\r\n        yield put({\r\n            type : ADD_POST_TO_ME,\r\n            data : id,\r\n        })\r\n    } catch(err) {\r\n        yield put({\r\n            type : ADD_POST_FAILURE,\r\n            data : err.reponse.data \r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.postId}/comment`, data); \r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        yield delay(1000);\r\n        yield put({\r\n            type : ADD_COMMENT_SUCCESS,\r\n            data : action.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : ADD_COMMENT_FAILURE,\r\n            data : err.reponse.data \r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}\r\n\r\n\r\n// post saga에서 action 리듀서 호출"]},"metadata":{},"sourceType":"module"}