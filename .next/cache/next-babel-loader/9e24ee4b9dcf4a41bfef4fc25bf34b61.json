{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n// post/[id].js\nimport { useRouter } from \"next/router\";\nimport { useSelector } from \"react-redux\";\nimport { END } from 'redux-saga';\nimport axios from 'axios';\nimport Head from 'next/head';\nimport wrapper from '../../store/configureStore';\nimport AppLayout from \"../../components/AppLayout\";\nimport PostCard from \"../../components/PostCard\";\nimport { LOAD_MY_INFO_REQUEST } from \"../../reducers/user\";\nimport { LOAD_POST_REQUEST } from '../../reducers/post';\n\nconst Post = () => {\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const {\n    singlePost\n  } = useSelector(state => state.post);\n  return __jsx(AppLayout, null, __jsx(Head, null, __jsx(\"title\", null, singlePost.User.nickname, \"\\uB2D8\\uC758 \\uAE00\"), __jsx(\"meta\", {\n    name: \"description\",\n    content: singlePost.content\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: `${singlePost.User.nickname}님의 게시글`\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: singlePost.content\n  }), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: singlePost.Images[0] ? singlePost.Images[0].src : 'https://nodebird.com/favicon.ico'\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: `https://nodebird.com/post/${id}`\n  })), __jsx(PostCard, {\n    post: singlePost\n  }));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  console.log(context);\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POST_REQUEST,\n    data: context.params.id\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default Post;","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/pages/post/[id].js"],"names":["useRouter","useSelector","END","axios","Head","wrapper","AppLayout","PostCard","LOAD_MY_INFO_REQUEST","LOAD_POST_REQUEST","Post","router","id","query","singlePost","state","post","User","nickname","content","Images","src","getServerSideProps","context","cookie","req","headers","console","log","defaults","Cookie","store","dispatch","type","data","params","sagaTask","toPromise"],"mappings":";;AAAA;AACA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,OAAOC,OAAP,MAAoB,4BAApB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAASC,oBAAT,QAAqC,qBAArC;AACA,SAAQC,iBAAR,QAAgC,qBAAhC;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACf,QAAMC,MAAM,GAAGX,SAAS,EAAxB;AACA,QAAM;AAACY,IAAAA;AAAD,MAAQD,MAAM,CAACE,KAArB;AACA,QAAM;AAACC,IAAAA;AAAD,MAAeb,WAAW,CAAEc,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAAhC;AACA,SACI,MAAC,SAAD,QACI,MAAC,IAAD,QACI,qBACGF,UAAU,CAACG,IAAX,CAAgBC,QADnB,wBADJ,EAKI;AAAM,IAAA,IAAI,EAAC,aAAX;AAAyB,IAAA,OAAO,EAAEJ,UAAU,CAACK;AAA7C,IALJ,EAMI;AAAM,IAAA,QAAQ,EAAC,UAAf;AAA0B,IAAA,OAAO,EAAG,GAAEL,UAAU,CAACG,IAAX,CAAgBC,QAAS;AAA/D,IANJ,EAOI;AAAM,IAAA,QAAQ,EAAC,gBAAf;AAAgC,IAAA,OAAO,EAAEJ,UAAU,CAACK;AAApD,IAPJ,EAQI;AAAM,IAAA,QAAQ,EAAC,UAAf;AAA0B,IAAA,OAAO,EAAEL,UAAU,CAACM,MAAX,CAAkB,CAAlB,IAAuBN,UAAU,CAACM,MAAX,CAAkB,CAAlB,EAAqBC,GAA5C,GAAkD;AAArF,IARJ,EASI;AAAM,IAAA,QAAQ,EAAC,QAAf;AAAwB,IAAA,OAAO,EAAG,6BAA4BT,EAAG;AAAjE,IATJ,CADJ,EAYI,MAAC,QAAD;AAAU,IAAA,IAAI,EAAEE;AAAhB,IAZJ,CADJ;AAgBH,CApBD;;AAsBA,OAAO,MAAMQ,kBAAkB,GAAGjB,OAAO,CAACiB,kBAAR,CAA2B,MAAOC,OAAP,IAAmB;AAC9E,QAAMC,MAAM,GAAGD,OAAO,CAACE,GAAR,GAAcF,OAAO,CAACE,GAAR,CAAYC,OAAZ,CAAoBF,MAAlC,GAA2C,EAA1D;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACApB,EAAAA,KAAK,CAAC0B,QAAN,CAAeH,OAAf,CAAuBI,MAAvB,GAAgC,EAAhC;;AACA,MAAIP,OAAO,CAACE,GAAR,IAAeD,MAAnB,EAA2B;AACzBrB,IAAAA,KAAK,CAAC0B,QAAN,CAAeH,OAAf,CAAuBI,MAAvB,GAAgCN,MAAhC;AACD;;AACDD,EAAAA,OAAO,CAACQ,KAAR,CAAcC,QAAd,CAAuB;AACrBC,IAAAA,IAAI,EAAEzB;AADe,GAAvB;AAGAe,EAAAA,OAAO,CAACQ,KAAR,CAAcC,QAAd,CAAuB;AACrBC,IAAAA,IAAI,EAAExB,iBADe;AAErByB,IAAAA,IAAI,EAAEX,OAAO,CAACY,MAAR,CAAevB;AAFA,GAAvB;AAIAW,EAAAA,OAAO,CAACQ,KAAR,CAAcC,QAAd,CAAuB9B,GAAvB;AACA,QAAMqB,OAAO,CAACQ,KAAR,CAAcK,QAAd,CAAuBC,SAAvB,EAAN;AACD,CAhBiC,CAA3B;AAmBP,eAAe3B,IAAf","sourcesContent":["// post/[id].js\r\nimport { useRouter } from \"next/router\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { END } from 'redux-saga';\r\nimport axios from 'axios';\r\nimport Head from 'next/head';\r\n\r\nimport wrapper from '../../store/configureStore';\r\nimport AppLayout from \"../../components/AppLayout\";\r\nimport PostCard from \"../../components/PostCard\";\r\nimport { LOAD_MY_INFO_REQUEST } from \"../../reducers/user\";\r\nimport {LOAD_POST_REQUEST} from '../../reducers/post';\r\n\r\nconst Post = () => {\r\n    const router = useRouter();\r\n    const {id}  = router.query;\r\n    const {singlePost} = useSelector((state) => state.post);\r\n    return (\r\n        <AppLayout>\r\n            <Head>\r\n                <title>\r\n                  {singlePost.User.nickname}\r\n                  님의 글\r\n                </title>\r\n                <meta name=\"description\" content={singlePost.content} />\r\n                <meta property=\"og:title\" content={`${singlePost.User.nickname}님의 게시글`} />\r\n                <meta property=\"og:description\" content={singlePost.content} />\r\n                <meta property=\"og:image\" content={singlePost.Images[0] ? singlePost.Images[0].src : 'https://nodebird.com/favicon.ico'} />\r\n                <meta property=\"og:url\" content={`https://nodebird.com/post/${id}`} />\r\n            </Head>\r\n            <PostCard post={singlePost} />\r\n        </AppLayout>\r\n    )\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  const cookie = context.req ? context.req.headers.cookie : '';\r\n  console.log(context);\r\n  axios.defaults.headers.Cookie = '';\r\n  if (context.req && cookie) {\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_POST_REQUEST,\r\n    data: context.params.id,\r\n  });\r\n  context.store.dispatch(END);\r\n  await context.store.sagaTask.toPromise();\r\n});\r\n\r\n\r\nexport default Post;"]},"metadata":{},"sourceType":"module"}