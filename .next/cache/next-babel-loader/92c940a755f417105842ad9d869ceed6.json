{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, delay, takeLatest, put, throttle, call } from 'redux-saga/effects';\nimport shortid from 'shortid';\nimport { ADD_POST_REQUEST, ADD_COMMENT_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: err.reponse.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: err.reponse.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.reponse.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.reponse.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data) \n    yield delay(1000); // post 리듀서 조작\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    }); // user 리듀서 조작\n\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.reponse.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.reponse.data\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield throttle(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield throttle(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLoadPost() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchUnlikePost), fork(watchLikePost), fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n} // post saga에서 action 리듀서 호출\n// 요청을 보낸 사람이 누군지 알기 위해서는 쿠키를 보내주어야 하기 때문에 front에서는 withCredentials : true,\n// back에서는 cors에서 credentials  true를 해주어야함","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/sagas/post.js"],"names":["axios","all","fork","delay","takeLatest","put","throttle","call","shortid","ADD_POST_REQUEST","ADD_COMMENT_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","unlikePostAPI","data","delete","unlikePost","action","result","type","err","reponse","likePostAPI","patch","likePost","loadPostsAPI","get","loadPosts","addPostAPI","post","content","addPost","id","generate","removePostAPI","removePost","addCommentAPI","postId","addComment","watchLikePost","watchUnlikePost","watchLoadPost","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,KAAnB,EAA0BC,UAA1B,EAAsCC,GAAtC,EAA2CC,QAA3C,EAAqDC,IAArD,QAAgE,oBAAhE;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SACIC,gBADJ,EACsBC,mBADtB,EAEIC,gBAFJ,EAEsBC,mBAFtB,EAGIC,gBAHJ,EAGsBC,mBAHtB,EAIIC,mBAJJ,EAIyBC,mBAJzB,EAKIC,mBALJ,EAK0BC,kBAL1B,EAMIC,kBANJ,EAMwBC,kBANxB,EAOIC,iBAPJ,EAOuBC,iBAPvB,EAQIC,mBARJ,EAQyBC,mBARzB,EAQ8CC,iBAR9C,EAQiEC,mBARjE,QASO,kBATP;AAUA,SAASC,cAAT,EAA0BC,iBAA1B,QAAmD,kBAAnD;;AAGA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AACzB,SAAO9B,KAAK,CAAC+B,MAAN,CAAc,SAAQD,IAAK,OAA3B,CAAP;AACH;;AAED,UAAUE,UAAV,CAAqBC,MAArB,EAA6B;AACzB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAM3B,IAAI,CAACsB,aAAD,EAAgBI,MAAM,CAACH,IAAvB,CAAzB;AACA,UAAMzB,GAAG,CAAC;AACN8B,MAAAA,IAAI,EAAGX,mBADD;AAENM,MAAAA,IAAI,EAAGI,MAAM,CAACJ;AAFR,KAAD,CAAT;AAIH,GAND,CAME,OAAMM,GAAN,EAAW;AACT,UAAM/B,GAAG,CAAC;AACN8B,MAAAA,IAAI,EAAGT,mBADD;AAENI,MAAAA,IAAI,EAAGM,GAAG,CAACC,OAAJ,CAAYP;AAFb,KAAD,CAAT;AAIH;AACJ;;AACD,SAASQ,WAAT,CAAqBR,IAArB,EAA2B;AACvB,SAAO9B,KAAK,CAACuC,KAAN,CAAa,SAAQT,IAAK,OAA1B,CAAP;AACH;;AAED,UAAUU,QAAV,CAAmBP,MAAnB,EAA2B;AACvB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAM3B,IAAI,CAAC+B,WAAD,EAAcL,MAAM,CAACH,IAArB,CAAzB;AACA,UAAMzB,GAAG,CAAC;AACN8B,MAAAA,IAAI,EAAGb,iBADD;AAENQ,MAAAA,IAAI,EAAGI,MAAM,CAACJ;AAFR,KAAD,CAAT;AAIH,GAND,CAME,OAAMM,GAAN,EAAW;AACT,UAAM/B,GAAG,CAAC;AACN8B,MAAAA,IAAI,EAAGV,iBADD;AAENK,MAAAA,IAAI,EAAGM,GAAG,CAACC,OAAJ,CAAYP;AAFb,KAAD,CAAT;AAIH;AACJ;;AACD,SAASW,YAAT,CAAsBX,IAAtB,EAA4B;AACxB,SAAO9B,KAAK,CAAC0C,GAAN,CAAU,QAAV,EAAoBZ,IAApB,CAAP;AACH;;AAED,UAAUa,SAAV,CAAoBV,MAApB,EAA4B;AACxB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAM3B,IAAI,CAACkC,YAAD,EAAeR,MAAM,CAACH,IAAtB,CAAzB;AACA,UAAMzB,GAAG,CAAC;AACN8B,MAAAA,IAAI,EAAGhB,kBADD;AAENW,MAAAA,IAAI,EAAGI,MAAM,CAACJ;AAFR,KAAD,CAAT;AAIH,GAND,CAME,OAAMM,GAAN,EAAW;AACT,UAAM/B,GAAG,CAAC;AACN8B,MAAAA,IAAI,EAAGf,kBADD;AAENU,MAAAA,IAAI,EAAGM,GAAG,CAACC,OAAJ,CAAYP;AAFb,KAAD,CAAT;AAIH;AACJ;;AACD,SAASc,UAAT,CAAoBd,IAApB,EAA0B;AACtB,SAAO9B,KAAK,CAAC6C,IAAN,CAAW,OAAX,EAAoB;AAAEC,IAAAA,OAAO,EAAGhB;AAAZ,GAApB,CAAP;AACH;;AAED,UAAUiB,OAAV,CAAkBd,MAAlB,EAA0B;AACtB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAM3B,IAAI,CAACqC,UAAD,EAAaX,MAAM,CAACH,IAApB,CAAzB;AACA,UAAMkB,EAAE,GAAGxC,OAAO,CAACyC,QAAR,EAAX;AACA,UAAM5C,GAAG,CAAC;AACN8B,MAAAA,IAAI,EAAGxB,gBADD;AAENmB,MAAAA,IAAI,EAAGI,MAAM,CAACJ;AAFR,KAAD,CAAT;AAIA,UAAMzB,GAAG,CAAC;AACN8B,MAAAA,IAAI,EAAGR,cADD;AAENG,MAAAA,IAAI,EAAGI,MAAM,CAACJ,IAAP,CAAYkB;AAFb,KAAD,CAAT;AAIH,GAXD,CAWE,OAAMZ,GAAN,EAAW;AACT,UAAM/B,GAAG,CAAC;AACN8B,MAAAA,IAAI,EAAGtB,gBADD;AAENiB,MAAAA,IAAI,EAAGM,GAAG,CAACC,OAAJ,CAAYP;AAFb,KAAD,CAAT;AAIH;AACJ;;AACD,SAASoB,aAAT,CAAuBpB,IAAvB,EAA6B;AACzB,SAAO9B,KAAK,CAAC+B,MAAN,CAAa,WAAb,EAA0BD,IAA1B,CAAP;AACH;;AAED,UAAUqB,UAAV,CAAqBlB,MAArB,EAA6B;AACzB,MAAI;AACA;AACA,UAAM9B,KAAK,CAAC,IAAD,CAAX,CAFA,CAGA;;AACA,UAAME,GAAG,CAAC;AACN8B,MAAAA,IAAI,EAAGnB,mBADD;AAENc,MAAAA,IAAI,EAAGG,MAAM,CAACH;AAFR,KAAD,CAAT,CAJA,CAQA;;AACA,UAAMzB,GAAG,CAAC;AACN8B,MAAAA,IAAI,EAAGP,iBADD;AAENE,MAAAA,IAAI,EAAGG,MAAM,CAACH;AAFR,KAAD,CAAT;AAIH,GAbD,CAaE,OAAMM,GAAN,EAAW;AACT,UAAM/B,GAAG,CAAC;AACN8B,MAAAA,IAAI,EAAGlB,mBADD;AAENa,MAAAA,IAAI,EAAGM,GAAG,CAACC,OAAJ,CAAYP;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASsB,aAAT,CAAuBtB,IAAvB,EAA6B;AACzB,SAAO9B,KAAK,CAAC6C,IAAN,CAAY,SAAQf,IAAI,CAACuB,MAAO,UAAhC,EAA2CvB,IAA3C,CAAP;AACH;;AAED,UAAUwB,UAAV,CAAqBrB,MAArB,EAA6B;AACzB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAM3B,IAAI,CAAC6C,aAAD,EAAgBnB,MAAM,CAACH,IAAvB,CAAzB;AACA,UAAMzB,GAAG,CAAC;AACN8B,MAAAA,IAAI,EAAGvB,mBADD;AAENkB,MAAAA,IAAI,EAAGI,MAAM,CAACJ;AAFR,KAAD,CAAT;AAIH,GAND,CAME,OAAMM,GAAN,EAAW;AACT,UAAM/B,GAAG,CAAC;AACN8B,MAAAA,IAAI,EAAGrB,mBADD;AAENgB,MAAAA,IAAI,EAAGM,GAAG,CAACC,OAAJ,CAAYP;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUyB,aAAV,GAA0B;AACtB,QAAMjD,QAAQ,CAAEe,iBAAF,EAAqBmB,QAArB,CAAd;AACH;;AAED,UAAUgB,eAAV,GAA4B;AACxB,QAAMlD,QAAQ,CAACiB,mBAAD,EAAsBS,UAAtB,CAAd;AACH;;AAED,UAAUyB,aAAV,GAA0B;AACtB,QAAMnD,QAAQ,CAAC,IAAD,EAAOY,kBAAP,EAA2ByB,SAA3B,CAAd;AACH;;AAED,UAAUe,YAAV,GAAyB;AACrB,QAAMtD,UAAU,CAACK,gBAAD,EAAmBsC,OAAnB,CAAhB;AACH;;AAED,UAAUY,eAAV,GAA4B;AACxB,QAAMvD,UAAU,CAACW,mBAAD,EAAsBoC,UAAtB,CAAhB;AACH;;AAED,UAAUS,eAAV,GAA4B;AACxB,QAAMxD,UAAU,CAACM,mBAAD,EAAsB4C,UAAtB,CAAhB;AACH;;AAED,eAAe,UAAUO,QAAV,GAAqB;AAChC,QAAM5D,GAAG,CAAC,CACNC,IAAI,CAACsD,eAAD,CADE,EAENtD,IAAI,CAACqD,aAAD,CAFE,EAGNrD,IAAI,CAACuD,aAAD,CAHE,EAINvD,IAAI,CAACwD,YAAD,CAJE,EAKNxD,IAAI,CAACyD,eAAD,CALE,EAMNzD,IAAI,CAAC0D,eAAD,CANE,CAAD,CAAT;AAQH,C,CAGD;AAEA;AACA","sourcesContent":["import axios from 'axios';\r\nimport {all, fork, delay, takeLatest, put, throttle, call} from 'redux-saga/effects';\r\nimport shortid from 'shortid';\r\nimport { \r\n    ADD_POST_REQUEST, ADD_COMMENT_REQUEST, \r\n    ADD_POST_SUCCESS, ADD_COMMENT_SUCCESS, \r\n    ADD_POST_FAILURE, ADD_COMMENT_FAILURE, \r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, \r\n    REMOVE_POST_FAILURE , LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE,\r\n    LIKE_POST_REQUEST, LIKE_POST_SUCCESS,\r\n    UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_FAILURE\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME , REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`) \r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type : UNLIKE_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : UNLIKE_POST_FAILURE,\r\n            data : err.reponse.data \r\n        })\r\n    }\r\n}\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`) \r\n}\r\n\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type : LIKE_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : LIKE_POST_FAILURE,\r\n            data : err.reponse.data \r\n        })\r\n    }\r\n}\r\nfunction loadPostsAPI(data) {\r\n    return axios.get('/posts', data) \r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.data);\r\n        yield put({\r\n            type : LOAD_POSTS_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : LOAD_POSTS_FAILURE,\r\n            data : err.reponse.data \r\n        })\r\n    }\r\n}\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post', { content : data }) \r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data); \r\n        const id = shortid.generate();\r\n        yield put({\r\n            type : ADD_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n        yield put({\r\n            type : ADD_POST_TO_ME,\r\n            data : result.data.id,\r\n        })\r\n    } catch(err) {\r\n        yield put({\r\n            type : ADD_POST_FAILURE,\r\n            data : err.reponse.data \r\n        })\r\n    }\r\n}\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api/post', data) \r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data) \r\n        yield delay(1000);\r\n        // post 리듀서 조작\r\n        yield put({\r\n            type : REMOVE_POST_SUCCESS,\r\n            data : action.data,\r\n        });\r\n        // user 리듀서 조작\r\n        yield put({\r\n            type : REMOVE_POST_OF_ME,\r\n            data : action.data,\r\n        })\r\n    } catch(err) {\r\n        yield put({\r\n            type : REMOVE_POST_FAILURE,\r\n            data : err.reponse.data \r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data); \r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type : ADD_COMMENT_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : ADD_COMMENT_FAILURE,\r\n            data : err.reponse.data \r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield throttle( LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n    yield throttle(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchUnlikePost),\r\n        fork(watchLikePost),\r\n        fork(watchLoadPost),\r\n        fork(watchAddPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}\r\n\r\n\r\n// post saga에서 action 리듀서 호출\r\n\r\n// 요청을 보낸 사람이 누군지 알기 위해서는 쿠키를 보내주어야 하기 때문에 front에서는 withCredentials : true,\r\n// back에서는 cors에서 credentials  true를 해주어야함"]},"metadata":{},"sourceType":"module"}