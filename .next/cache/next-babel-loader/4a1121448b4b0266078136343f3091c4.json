{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kimsooin\\\\Desktop\\\\\\uACF5\\uBD80\\uAE30\\uB85D\\\\\\uACF5\\uBD80\\uAE30\\uB85D\\\\22.04 \\uACF5\\uBD80\\uAE30\\uB85D\\\\next-study\\\\front\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef } from \"react\";\nimport { useInView } from \"react-intersection-observer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport AppLayout from \"../components/AppLayout\";\nimport PostCard from \"../components/PostCard\";\nimport PostForm from \"../components/PostForm\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport { LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\nimport wrapper from \"../store/configureStore\";\n\nconst Home = () => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePost,\n    loadPostsLoading,\n    retweetError\n  } = useSelector(state => state.post);\n  const [ref, inView] = useInView();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(() => {\n    dispatch({\n      type: LOAD_MY_INFO_REQUEST\n    });\n\n    if (inView && hasMorePost && !loadPostsLoading) {\n      var _mainPosts;\n\n      const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n      dispatch({\n        type: LOAD_POSTS_REQUEST,\n        lastId\n      });\n    }\n  }, [inView, hasMorePost, loadPostsLoading, mainPosts]);\n  return __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, me && __jsx(PostForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 20\n    }\n  }), mainPosts.map(post => __jsx(PostCard, {\n    key: post.id,\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 38\n    }\n  })), __jsx(\"div\", {\n    ref: hasMorePost && !loadPostsLoading ? ref : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(context => {\n  console.log(context);\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  });\n}); // 서버사이드렌더링을 위한 준비 (Home보다 먼저 실행된다.)\n// 서버사이드렌더링은 처음 렌더링 시 백엔드까지 한번에 갔다가 응답을 받아와 브라우저에서 요청을 두번 하지 않아도돼\n// 초기 로딩 속도가 빨라지는 장점이 있다.\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/pages/index.js"],"names":["React","useEffect","useRef","useInView","useDispatch","useSelector","AppLayout","PostCard","PostForm","LOAD_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","wrapper","Home","me","state","user","mainPosts","hasMorePost","loadPostsLoading","retweetError","post","ref","inView","dispatch","alert","type","lastId","length","id","map","undefined","getServerSideProps","context","console","log","store"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,OAAOC,OAAP,MAAoB,yBAApB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACf,QAAM;AAAEC,IAAAA;AAAF,MAASR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAA1B;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,WAAb;AAA0BC,IAAAA,gBAA1B;AAA4CC,IAAAA;AAA5C,MAA6Dd,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACM,IAAlB,CAA9E;AACA,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBnB,SAAS,EAA/B;AACA,QAAMoB,QAAQ,GAAGnB,WAAW,EAA5B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGkB,YAAH,EAAiB;AACbK,MAAAA,KAAK,CAACL,YAAD,CAAL;AACH;AACJ,GAJQ,EAIP,CAACA,YAAD,CAJO,CAAT;AAOAlB,EAAAA,SAAS,CAAC,MAAM;AACZsB,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAGf;AADF,KAAD,CAAR;;AAIA,QAAGY,MAAM,IAAIL,WAAV,IAAyB,CAACC,gBAA7B,EAA+C;AAAA;;AAC3C,YAAMQ,MAAM,iBAAGV,SAAS,CAACA,SAAS,CAACW,MAAV,GAAmB,CAApB,CAAZ,+CAAG,WAAiCC,EAAhD;AACAL,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAAGhB,kBADF;AAELiB,QAAAA;AAFK,OAAD,CAAR;AAIH;AACJ,GAZQ,EAYP,CAACJ,MAAD,EAASL,WAAT,EAAsBC,gBAAtB,EAAwCF,SAAxC,CAZO,CAAT;AAcA,SACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,EAAE,IAAI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADX,EAEKG,SAAS,CAACa,GAAV,CAAeT,IAAD,IAAU,MAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,IAAI,CAACQ,EAApB;AAAwB,IAAA,IAAI,EAAER,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAxB,CAFL,EAGI;AAAK,IAAA,GAAG,EAAEH,WAAW,IAAI,CAACC,gBAAhB,GAAmCG,GAAnC,GAAyCS,SAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ;AAOH,CAlCD;;AAoCA,OAAO,MAAMC,kBAAkB,GAAGpB,OAAO,CAACoB,kBAAR,CAA4BC,OAAD,IAAa;AACtEC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAA,EAAAA,OAAO,CAACG,KAAR,CAAcZ,QAAd,CAAuB;AACnBE,IAAAA,IAAI,EAAGf;AADY,GAAvB;AAGAsB,EAAAA,OAAO,CAACG,KAAR,CAAcZ,QAAd,CAAuB;AACnBE,IAAAA,IAAI,EAAGhB;AADY,GAAvB;AAIH,CATiC,CAA3B,C,CASH;AACJ;AACA;;AAEA,eAAeG,IAAf","sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport PostCard from \"../components/PostCard\";\r\nimport PostForm from \"../components/PostForm\";\r\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\r\nimport { LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\r\nimport wrapper from \"../store/configureStore\";\r\n\r\nconst Home = () => {\r\n    const { me } = useSelector((state) => state.user); \r\n    const { mainPosts, hasMorePost, loadPostsLoading, retweetError } = useSelector((state) => state.post); \r\n    const [ref, inView] = useInView();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if(retweetError) {\r\n            alert(retweetError);\r\n        }\r\n    },[retweetError])\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch({\r\n            type : LOAD_MY_INFO_REQUEST,\r\n        })\r\n\r\n        if(inView && hasMorePost && !loadPostsLoading) {\r\n            const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n            dispatch({\r\n                type : LOAD_POSTS_REQUEST,\r\n                lastId,\r\n            });\r\n        }\r\n    },[inView, hasMorePost, loadPostsLoading, mainPosts]\r\n    );\r\n    return(\r\n        <AppLayout>\r\n            {me && <PostForm />}\r\n            {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\r\n            <div ref={hasMorePost && !loadPostsLoading ? ref : undefined} />\r\n        </AppLayout>\r\n    )\r\n}\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps((context) => {\r\n    console.log(context);\r\n    context.store.dispatch({\r\n        type : LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type : LOAD_POSTS_REQUEST,\r\n    });\r\n\r\n}); // 서버사이드렌더링을 위한 준비 (Home보다 먼저 실행된다.)\r\n// 서버사이드렌더링은 처음 렌더링 시 백엔드까지 한번에 갔다가 응답을 받아와 브라우저에서 요청을 두번 하지 않아도돼\r\n// 초기 로딩 속도가 빨라지는 장점이 있다.\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}