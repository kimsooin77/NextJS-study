{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from 'axios';\nimport { all, fork, delay, takeLatest, put } from 'redux-saga/effects';\nimport shortid from 'shortid';\nimport { ADD_POST_REQUEST, ADD_COMMENT_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortid.generate();\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.reponse.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction removePost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function removePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortid.generate(); // post 리듀서 조작\n\n          _context2.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context2.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: id\n          });\n\n        case 8:\n          _context2.next = 14;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context2.t0.reponse.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context3.t0.reponse.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n} // post saga에서 action 리듀서 호출","map":{"version":3,"sources":["C:/Users/kimsooin/Desktop/공부기록/공부기록/22.04 공부기록/next-study/front/sagas/post.js"],"names":["addPost","removePost","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga","axios","all","fork","delay","takeLatest","put","shortid","ADD_POST_REQUEST","ADD_COMMENT_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","action","id","generate","type","content","reponse","removePostAPI","addCommentAPI","postId"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {all, fork, delay, takeLatest, put} from 'redux-saga/effects';\r\nimport shortid from 'shortid';\r\nimport { ADD_POST_REQUEST, ADD_COMMENT_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from '../reducers/post';\r\nimport { ADD_POST_TO_ME , REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data) \r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data) \r\n        yield delay(1000);\r\n        const id = shortid.generate();\r\n        yield put({\r\n            type : ADD_POST_SUCCESS,\r\n            data : {\r\n                id,\r\n                content : action.data,\r\n            },\r\n        });\r\n        yield put({\r\n            type : ADD_POST_TO_ME,\r\n            data : id,\r\n        })\r\n    } catch(err) {\r\n        yield put({\r\n            type : ADD_POST_FAILURE,\r\n            data : err.reponse.data \r\n        })\r\n    }\r\n}\r\nfunction removePostAPI(data) {\r\n    return axios.post('/api/post', data) \r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data) \r\n        yield delay(1000);\r\n        const id = shortid.generate();\r\n        // post 리듀서 조작\r\n        yield put({\r\n            type : REMOVE_POST_SUCCESS,\r\n            data : {\r\n                id,\r\n                content : action.data,\r\n            },\r\n        });\r\n        // user 리듀서 조작\r\n        yield put({\r\n            type : REMOVE_POST_OF_ME,\r\n            data : id,\r\n        })\r\n    } catch(err) {\r\n        yield put({\r\n            type : REMOVE_POST_FAILURE,\r\n            data : err.reponse.data \r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.postId}/comment`, data); \r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        yield delay(1000);\r\n        yield put({\r\n            type : ADD_COMMENT_SUCCESS,\r\n            data : action.data,\r\n        });\r\n    } catch(err) {\r\n        yield put({\r\n            type : ADD_COMMENT_FAILURE,\r\n            data : err.reponse.data \r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}\r\n\r\n\r\n// post saga에서 action 리듀서 호출"]},"metadata":{},"sourceType":"module"}